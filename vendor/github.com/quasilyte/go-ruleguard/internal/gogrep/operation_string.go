// Code generated by "stringer -type=operation -trimprefix=op"; DO NOT EDIT.

package gogrep

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opInvalid-0]
	_ = x[opNode-1]
	_ = x[opNamedNode-2]
	_ = x[opNodeSeq-3]
	_ = x[opNamedNodeSeq-4]
	_ = x[opOptNode-5]
	_ = x[opNamedOptNode-6]
	_ = x[opFieldNode-7]
	_ = x[opNamedFieldNode-8]
	_ = x[opMultiStmt-9]
	_ = x[opMultiExpr-10]
	_ = x[opMultiDecl-11]
	_ = x[opEnd-12]
	_ = x[opBasicLit-13]
	_ = x[opStrictIntLit-14]
	_ = x[opStrictFloatLit-15]
	_ = x[opStrictCharLit-16]
	_ = x[opStrictStringLit-17]
	_ = x[opStrictComplexLit-18]
	_ = x[opIdent-19]
	_ = x[opStdlibPkg-20]
	_ = x[opIndexExpr-21]
	_ = x[opSliceExpr-22]
	_ = x[opSliceFromExpr-23]
	_ = x[opSliceToExpr-24]
	_ = x[opSliceFromToExpr-25]
	_ = x[opSliceToCapExpr-26]
	_ = x[opSliceFromToCapExpr-27]
	_ = x[opFuncLit-28]
	_ = x[opCompositeLit-29]
	_ = x[opTypedCompositeLit-30]
	_ = x[opSimpleSelectorExpr-31]
	_ = x[opSelectorExpr-32]
	_ = x[opTypeAssertExpr-33]
	_ = x[opTypeSwitchAssertExpr-34]
	_ = x[opStructType-35]
	_ = x[opInterfaceType-36]
	_ = x[opVoidFuncType-37]
	_ = x[opFuncType-38]
	_ = x[opArrayType-39]
	_ = x[opSliceType-40]
	_ = x[opMapType-41]
	_ = x[opChanType-42]
	_ = x[opKeyValueExpr-43]
	_ = x[opEllipsis-44]
	_ = x[opTypedEllipsis-45]
	_ = x[opStarExpr-46]
	_ = x[opUnaryExpr-47]
	_ = x[opBinaryExpr-48]
	_ = x[opParenExpr-49]
	_ = x[opArgList-50]
	_ = x[opSimpleArgList-51]
	_ = x[opVariadicCallExpr-52]
	_ = x[opNonVariadicCallExpr-53]
	_ = x[opCallExpr-54]
	_ = x[opAssignStmt-55]
	_ = x[opMultiAssignStmt-56]
	_ = x[opBranchStmt-57]
	_ = x[opSimpleLabeledBranchStmt-58]
	_ = x[opLabeledBranchStmt-59]
	_ = x[opSimpleLabeledStmt-60]
	_ = x[opLabeledStmt-61]
	_ = x[opBlockStmt-62]
	_ = x[opExprStmt-63]
	_ = x[opGoStmt-64]
	_ = x[opDeferStmt-65]
	_ = x[opSendStmt-66]
	_ = x[opEmptyStmt-67]
	_ = x[opIncDecStmt-68]
	_ = x[opReturnStmt-69]
	_ = x[opIfStmt-70]
	_ = x[opIfInitStmt-71]
	_ = x[opIfElseStmt-72]
	_ = x[opIfInitElseStmt-73]
	_ = x[opIfNamedOptStmt-74]
	_ = x[opIfNamedOptElseStmt-75]
	_ = x[opSwitchStmt-76]
	_ = x[opSwitchTagStmt-77]
	_ = x[opSwitchInitStmt-78]
	_ = x[opSwitchInitTagStmt-79]
	_ = x[opSelectStmt-80]
	_ = x[opTypeSwitchStmt-81]
	_ = x[opTypeSwitchInitStmt-82]
	_ = x[opCaseClause-83]
	_ = x[opDefaultCaseClause-84]
	_ = x[opCommClause-85]
	_ = x[opDefaultCommClause-86]
	_ = x[opForStmt-87]
	_ = x[opForPostStmt-88]
	_ = x[opForCondStmt-89]
	_ = x[opForCondPostStmt-90]
	_ = x[opForInitStmt-91]
	_ = x[opForInitPostStmt-92]
	_ = x[opForInitCondStmt-93]
	_ = x[opForInitCondPostStmt-94]
	_ = x[opRangeStmt-95]
	_ = x[opRangeKeyStmt-96]
	_ = x[opRangeKeyValueStmt-97]
	_ = x[opFieldList-98]
	_ = x[opUnnamedField-99]
	_ = x[opSimpleField-100]
	_ = x[opField-101]
	_ = x[opMultiField-102]
	_ = x[opValueSpec-103]
	_ = x[opValueInitSpec-104]
	_ = x[opTypedValueInitSpec-105]
	_ = x[opTypedValueSpec-106]
	_ = x[opTypeSpec-107]
	_ = x[opTypeAliasSpec-108]
	_ = x[opFuncDecl-109]
	_ = x[opMethodDecl-110]
	_ = x[opFuncProtoDecl-111]
	_ = x[opMethodProtoDecl-112]
	_ = x[opDeclStmt-113]
	_ = x[opConstDecl-114]
	_ = x[opVarDecl-115]
	_ = x[opTypeDecl-116]
	_ = x[opEmptyPackage-117]
}

const _operation_name = "InvalidNodeNamedNodeNodeSeqNamedNodeSeqOptNodeNamedOptNodeFieldNodeNamedFieldNodeMultiStmtMultiExprMultiDeclEndBasicLitStrictIntLitStrictFloatLitStrictCharLitStrictStringLitStrictComplexLitIdentStdlibPkgIndexExprSliceExprSliceFromExprSliceToExprSliceFromToExprSliceToCapExprSliceFromToCapExprFuncLitCompositeLitTypedCompositeLitSimpleSelectorExprSelectorExprTypeAssertExprTypeSwitchAssertExprStructTypeInterfaceTypeVoidFuncTypeFuncTypeArrayTypeSliceTypeMapTypeChanTypeKeyValueExprEllipsisTypedEllipsisStarExprUnaryExprBinaryExprParenExprArgListSimpleArgListVariadicCallExprNonVariadicCallExprCallExprAssignStmtMultiAssignStmtBranchStmtSimpleLabeledBranchStmtLabeledBranchStmtSimpleLabeledStmtLabeledStmtBlockStmtExprStmtGoStmtDeferStmtSendStmtEmptyStmtIncDecStmtReturnStmtIfStmtIfInitStmtIfElseStmtIfInitElseStmtIfNamedOptStmtIfNamedOptElseStmtSwitchStmtSwitchTagStmtSwitchInitStmtSwitchInitTagStmtSelectStmtTypeSwitchStmtTypeSwitchInitStmtCaseClauseDefaultCaseClauseCommClauseDefaultCommClauseForStmtForPostStmtForCondStmtForCondPostStmtForInitStmtForInitPostStmtForInitCondStmtForInitCondPostStmtRangeStmtRangeKeyStmtRangeKeyValueStmtFieldListUnnamedFieldSimpleFieldFieldMultiFieldValueSpecValueInitSpecTypedValueInitSpecTypedValueSpecTypeSpecTypeAliasSpecFuncDeclMethodDeclFuncProtoDeclMethodProtoDeclDeclStmtConstDeclVarDeclTypeDeclEmptyPackage"

var _operation_index = [...]uint16{0, 7, 11, 20, 27, 39, 46, 58, 67, 81, 90, 99, 108, 111, 119, 131, 145, 158, 173, 189, 194, 203, 212, 221, 234, 245, 260, 274, 292, 299, 311, 328, 346, 358, 372, 392, 402, 415, 427, 435, 444, 453, 460, 468, 480, 488, 501, 509, 518, 528, 537, 544, 557, 573, 592, 600, 610, 625, 635, 658, 675, 692, 703, 712, 720, 726, 735, 743, 752, 762, 772, 778, 788, 798, 812, 826, 844, 854, 867, 881, 898, 908, 922, 940, 950, 967, 977, 994, 1001, 1012, 1023, 1038, 1049, 1064, 1079, 1098, 1107, 1119, 1136, 1145, 1157, 1168, 1173, 1183, 1192, 1205, 1223, 1237, 1245, 1258, 1266, 1276, 1289, 1304, 1312, 1321, 1328, 1336, 1348}

func (i operation) String() string {
	if i >= operation(len(_operation_index)-1) {
		return "operation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _operation_name[_operation_index[i]:_operation_index[i+1]]
}
