// Code generated by "stringer -type=opcode -trimprefix=op"; DO NOT EDIT.

package quasigo

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opInvalid-0]
	_ = x[opPop-1]
	_ = x[opDup-2]
	_ = x[opPushParam-3]
	_ = x[opPushIntParam-4]
	_ = x[opPushLocal-5]
	_ = x[opPushIntLocal-6]
	_ = x[opPushFalse-7]
	_ = x[opPushTrue-8]
	_ = x[opPushConst-9]
	_ = x[opPushIntConst-10]
	_ = x[opConvIntToIface-11]
	_ = x[opSetLocal-12]
	_ = x[opSetIntLocal-13]
	_ = x[opIncLocal-14]
	_ = x[opDecLocal-15]
	_ = x[opReturnTop-16]
	_ = x[opReturnIntTop-17]
	_ = x[opReturnFalse-18]
	_ = x[opReturnTrue-19]
	_ = x[opReturn-20]
	_ = x[opJump-21]
	_ = x[opJumpFalse-22]
	_ = x[opJumpTrue-23]
	_ = x[opSetVariadicLen-24]
	_ = x[opCallNative-25]
	_ = x[opIsNil-26]
	_ = x[opIsNotNil-27]
	_ = x[opNot-28]
	_ = x[opEqInt-29]
	_ = x[opNotEqInt-30]
	_ = x[opGtInt-31]
	_ = x[opGtEqInt-32]
	_ = x[opLtInt-33]
	_ = x[opLtEqInt-34]
	_ = x[opEqString-35]
	_ = x[opNotEqString-36]
	_ = x[opConcat-37]
	_ = x[opAdd-38]
	_ = x[opSub-39]
	_ = x[opStringSlice-40]
	_ = x[opStringSliceFrom-41]
	_ = x[opStringSliceTo-42]
	_ = x[opStringLen-43]
}

const _opcode_name = "InvalidPopDupPushParamPushIntParamPushLocalPushIntLocalPushFalsePushTruePushConstPushIntConstConvIntToIfaceSetLocalSetIntLocalIncLocalDecLocalReturnTopReturnIntTopReturnFalseReturnTrueReturnJumpJumpFalseJumpTrueSetVariadicLenCallNativeIsNilIsNotNilNotEqIntNotEqIntGtIntGtEqIntLtIntLtEqIntEqStringNotEqStringConcatAddSubStringSliceStringSliceFromStringSliceToStringLen"

var _opcode_index = [...]uint16{0, 7, 10, 13, 22, 34, 43, 55, 64, 72, 81, 93, 107, 115, 126, 134, 142, 151, 163, 174, 184, 190, 194, 203, 211, 225, 235, 240, 248, 251, 256, 264, 269, 276, 281, 288, 296, 307, 313, 316, 319, 330, 345, 358, 367}

func (i opcode) String() string {
	if i >= opcode(len(_opcode_index)-1) {
		return "opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _opcode_name[_opcode_index[i]:_opcode_index[i+1]]
}
