// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.woodpecker-ci.org/woodpecker/v3/pipeline/rpc/proto"
)

// NewMockWoodpeckerAuthServer creates a new instance of MockWoodpeckerAuthServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWoodpeckerAuthServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWoodpeckerAuthServer {
	mock := &MockWoodpeckerAuthServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWoodpeckerAuthServer is an autogenerated mock type for the WoodpeckerAuthServer type
type MockWoodpeckerAuthServer struct {
	mock.Mock
}

type MockWoodpeckerAuthServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWoodpeckerAuthServer) EXPECT() *MockWoodpeckerAuthServer_Expecter {
	return &MockWoodpeckerAuthServer_Expecter{mock: &_m.Mock}
}

// Auth provides a mock function for the type MockWoodpeckerAuthServer
func (_mock *MockWoodpeckerAuthServer) Auth(context1 context.Context, authRequest *proto.AuthRequest) (*proto.AuthResponse, error) {
	ret := _mock.Called(context1, authRequest)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 *proto.AuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthRequest) (*proto.AuthResponse, error)); ok {
		return returnFunc(context1, authRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthRequest) *proto.AuthResponse); ok {
		r0 = returnFunc(context1, authRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AuthRequest) error); ok {
		r1 = returnFunc(context1, authRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerAuthServer_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type MockWoodpeckerAuthServer_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
//   - context1 context.Context
//   - authRequest *proto.AuthRequest
func (_e *MockWoodpeckerAuthServer_Expecter) Auth(context1 interface{}, authRequest interface{}) *MockWoodpeckerAuthServer_Auth_Call {
	return &MockWoodpeckerAuthServer_Auth_Call{Call: _e.mock.On("Auth", context1, authRequest)}
}

func (_c *MockWoodpeckerAuthServer_Auth_Call) Run(run func(context1 context.Context, authRequest *proto.AuthRequest)) *MockWoodpeckerAuthServer_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.AuthRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.AuthRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerAuthServer_Auth_Call) Return(authResponse *proto.AuthResponse, err error) *MockWoodpeckerAuthServer_Auth_Call {
	_c.Call.Return(authResponse, err)
	return _c
}

func (_c *MockWoodpeckerAuthServer_Auth_Call) RunAndReturn(run func(context1 context.Context, authRequest *proto.AuthRequest) (*proto.AuthResponse, error)) *MockWoodpeckerAuthServer_Auth_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedWoodpeckerAuthServer provides a mock function for the type MockWoodpeckerAuthServer
func (_mock *MockWoodpeckerAuthServer) mustEmbedUnimplementedWoodpeckerAuthServer() {
	_mock.Called()
	return
}

// MockWoodpeckerAuthServer_mustEmbedUnimplementedWoodpeckerAuthServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedWoodpeckerAuthServer'
type MockWoodpeckerAuthServer_mustEmbedUnimplementedWoodpeckerAuthServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedWoodpeckerAuthServer is a helper method to define mock.On call
func (_e *MockWoodpeckerAuthServer_Expecter) mustEmbedUnimplementedWoodpeckerAuthServer() *MockWoodpeckerAuthServer_mustEmbedUnimplementedWoodpeckerAuthServer_Call {
	return &MockWoodpeckerAuthServer_mustEmbedUnimplementedWoodpeckerAuthServer_Call{Call: _e.mock.On("mustEmbedUnimplementedWoodpeckerAuthServer")}
}

func (_c *MockWoodpeckerAuthServer_mustEmbedUnimplementedWoodpeckerAuthServer_Call) Run(run func()) *MockWoodpeckerAuthServer_mustEmbedUnimplementedWoodpeckerAuthServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWoodpeckerAuthServer_mustEmbedUnimplementedWoodpeckerAuthServer_Call) Return() *MockWoodpeckerAuthServer_mustEmbedUnimplementedWoodpeckerAuthServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWoodpeckerAuthServer_mustEmbedUnimplementedWoodpeckerAuthServer_Call) RunAndReturn(run func()) *MockWoodpeckerAuthServer_mustEmbedUnimplementedWoodpeckerAuthServer_Call {
	_c.Run(run)
	return _c
}
