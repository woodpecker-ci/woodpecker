// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	proto "go.woodpecker-ci.org/woodpecker/v3/pipeline/rpc/proto"
)

// MockWoodpeckerServer is an autogenerated mock type for the WoodpeckerServer type
type MockWoodpeckerServer struct {
	mock.Mock
}

type MockWoodpeckerServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWoodpeckerServer) EXPECT() *MockWoodpeckerServer_Expecter {
	return &MockWoodpeckerServer_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) Done(_a0 context.Context, _a1 *proto.DoneRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DoneRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DoneRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.DoneRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockWoodpeckerServer_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.DoneRequest
func (_e *MockWoodpeckerServer_Expecter) Done(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_Done_Call {
	return &MockWoodpeckerServer_Done_Call{Call: _e.mock.On("Done", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_Done_Call) Run(run func(_a0 context.Context, _a1 *proto.DoneRequest)) *MockWoodpeckerServer_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.DoneRequest))
	})
	return _c
}

func (_c *MockWoodpeckerServer_Done_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerServer_Done_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_Done_Call) RunAndReturn(run func(context.Context, *proto.DoneRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Extend provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) Extend(_a0 context.Context, _a1 *proto.ExtendRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ExtendRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ExtendRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ExtendRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_Extend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extend'
type MockWoodpeckerServer_Extend_Call struct {
	*mock.Call
}

// Extend is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.ExtendRequest
func (_e *MockWoodpeckerServer_Expecter) Extend(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_Extend_Call {
	return &MockWoodpeckerServer_Extend_Call{Call: _e.mock.On("Extend", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_Extend_Call) Run(run func(_a0 context.Context, _a1 *proto.ExtendRequest)) *MockWoodpeckerServer_Extend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ExtendRequest))
	})
	return _c
}

func (_c *MockWoodpeckerServer_Extend_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerServer_Extend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_Extend_Call) RunAndReturn(run func(context.Context, *proto.ExtendRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Extend_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) Init(_a0 context.Context, _a1 *proto.InitRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InitRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InitRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.InitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockWoodpeckerServer_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.InitRequest
func (_e *MockWoodpeckerServer_Expecter) Init(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_Init_Call {
	return &MockWoodpeckerServer_Init_Call{Call: _e.mock.On("Init", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_Init_Call) Run(run func(_a0 context.Context, _a1 *proto.InitRequest)) *MockWoodpeckerServer_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.InitRequest))
	})
	return _c
}

func (_c *MockWoodpeckerServer_Init_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerServer_Init_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_Init_Call) RunAndReturn(run func(context.Context, *proto.InitRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) Log(_a0 context.Context, _a1 *proto.LogRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LogRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockWoodpeckerServer_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.LogRequest
func (_e *MockWoodpeckerServer_Expecter) Log(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_Log_Call {
	return &MockWoodpeckerServer_Log_Call{Call: _e.mock.On("Log", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_Log_Call) Run(run func(_a0 context.Context, _a1 *proto.LogRequest)) *MockWoodpeckerServer_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.LogRequest))
	})
	return _c
}

func (_c *MockWoodpeckerServer_Log_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerServer_Log_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_Log_Call) RunAndReturn(run func(context.Context, *proto.LogRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) Next(_a0 context.Context, _a1 *proto.NextRequest) (*proto.NextResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *proto.NextResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NextRequest) (*proto.NextResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NextRequest) *proto.NextResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NextResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.NextRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockWoodpeckerServer_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.NextRequest
func (_e *MockWoodpeckerServer_Expecter) Next(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_Next_Call {
	return &MockWoodpeckerServer_Next_Call{Call: _e.mock.On("Next", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_Next_Call) Run(run func(_a0 context.Context, _a1 *proto.NextRequest)) *MockWoodpeckerServer_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.NextRequest))
	})
	return _c
}

func (_c *MockWoodpeckerServer_Next_Call) Return(_a0 *proto.NextResponse, _a1 error) *MockWoodpeckerServer_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_Next_Call) RunAndReturn(run func(context.Context, *proto.NextRequest) (*proto.NextResponse, error)) *MockWoodpeckerServer_Next_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAgent provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) RegisterAgent(_a0 context.Context, _a1 *proto.RegisterAgentRequest) (*proto.RegisterAgentResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAgent")
	}

	var r0 *proto.RegisterAgentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterAgentRequest) (*proto.RegisterAgentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterAgentRequest) *proto.RegisterAgentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterAgentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.RegisterAgentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_RegisterAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAgent'
type MockWoodpeckerServer_RegisterAgent_Call struct {
	*mock.Call
}

// RegisterAgent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.RegisterAgentRequest
func (_e *MockWoodpeckerServer_Expecter) RegisterAgent(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_RegisterAgent_Call {
	return &MockWoodpeckerServer_RegisterAgent_Call{Call: _e.mock.On("RegisterAgent", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_RegisterAgent_Call) Run(run func(_a0 context.Context, _a1 *proto.RegisterAgentRequest)) *MockWoodpeckerServer_RegisterAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.RegisterAgentRequest))
	})
	return _c
}

func (_c *MockWoodpeckerServer_RegisterAgent_Call) Return(_a0 *proto.RegisterAgentResponse, _a1 error) *MockWoodpeckerServer_RegisterAgent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_RegisterAgent_Call) RunAndReturn(run func(context.Context, *proto.RegisterAgentRequest) (*proto.RegisterAgentResponse, error)) *MockWoodpeckerServer_RegisterAgent_Call {
	_c.Call.Return(run)
	return _c
}

// ReportHealth provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) ReportHealth(_a0 context.Context, _a1 *proto.ReportHealthRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ReportHealth")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReportHealthRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReportHealthRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ReportHealthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_ReportHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportHealth'
type MockWoodpeckerServer_ReportHealth_Call struct {
	*mock.Call
}

// ReportHealth is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.ReportHealthRequest
func (_e *MockWoodpeckerServer_Expecter) ReportHealth(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_ReportHealth_Call {
	return &MockWoodpeckerServer_ReportHealth_Call{Call: _e.mock.On("ReportHealth", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_ReportHealth_Call) Run(run func(_a0 context.Context, _a1 *proto.ReportHealthRequest)) *MockWoodpeckerServer_ReportHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ReportHealthRequest))
	})
	return _c
}

func (_c *MockWoodpeckerServer_ReportHealth_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerServer_ReportHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_ReportHealth_Call) RunAndReturn(run func(context.Context, *proto.ReportHealthRequest) (*proto.Empty, error)) *MockWoodpeckerServer_ReportHealth_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterAgent provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) UnregisterAgent(_a0 context.Context, _a1 *proto.Empty) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterAgent")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_UnregisterAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterAgent'
type MockWoodpeckerServer_UnregisterAgent_Call struct {
	*mock.Call
}

// UnregisterAgent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.Empty
func (_e *MockWoodpeckerServer_Expecter) UnregisterAgent(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_UnregisterAgent_Call {
	return &MockWoodpeckerServer_UnregisterAgent_Call{Call: _e.mock.On("UnregisterAgent", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_UnregisterAgent_Call) Run(run func(_a0 context.Context, _a1 *proto.Empty)) *MockWoodpeckerServer_UnregisterAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.Empty))
	})
	return _c
}

func (_c *MockWoodpeckerServer_UnregisterAgent_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerServer_UnregisterAgent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_UnregisterAgent_Call) RunAndReturn(run func(context.Context, *proto.Empty) (*proto.Empty, error)) *MockWoodpeckerServer_UnregisterAgent_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) Update(_a0 context.Context, _a1 *proto.UpdateRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockWoodpeckerServer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.UpdateRequest
func (_e *MockWoodpeckerServer_Expecter) Update(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_Update_Call {
	return &MockWoodpeckerServer_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_Update_Call) Run(run func(_a0 context.Context, _a1 *proto.UpdateRequest)) *MockWoodpeckerServer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.UpdateRequest))
	})
	return _c
}

func (_c *MockWoodpeckerServer_Update_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerServer_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_Update_Call) RunAndReturn(run func(context.Context, *proto.UpdateRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) Version(_a0 context.Context, _a1 *proto.Empty) (*proto.VersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 *proto.VersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty) (*proto.VersionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty) *proto.VersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.VersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockWoodpeckerServer_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.Empty
func (_e *MockWoodpeckerServer_Expecter) Version(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_Version_Call {
	return &MockWoodpeckerServer_Version_Call{Call: _e.mock.On("Version", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_Version_Call) Run(run func(_a0 context.Context, _a1 *proto.Empty)) *MockWoodpeckerServer_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.Empty))
	})
	return _c
}

func (_c *MockWoodpeckerServer_Version_Call) Return(_a0 *proto.VersionResponse, _a1 error) *MockWoodpeckerServer_Version_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_Version_Call) RunAndReturn(run func(context.Context, *proto.Empty) (*proto.VersionResponse, error)) *MockWoodpeckerServer_Version_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields: _a0, _a1
func (_m *MockWoodpeckerServer) Wait(_a0 context.Context, _a1 *proto.WaitRequest) (*proto.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WaitRequest) (*proto.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WaitRequest) *proto.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.WaitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerServer_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockWoodpeckerServer_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.WaitRequest
func (_e *MockWoodpeckerServer_Expecter) Wait(_a0 interface{}, _a1 interface{}) *MockWoodpeckerServer_Wait_Call {
	return &MockWoodpeckerServer_Wait_Call{Call: _e.mock.On("Wait", _a0, _a1)}
}

func (_c *MockWoodpeckerServer_Wait_Call) Run(run func(_a0 context.Context, _a1 *proto.WaitRequest)) *MockWoodpeckerServer_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.WaitRequest))
	})
	return _c
}

func (_c *MockWoodpeckerServer_Wait_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerServer_Wait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerServer_Wait_Call) RunAndReturn(run func(context.Context, *proto.WaitRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedWoodpeckerServer provides a mock function with no fields
func (_m *MockWoodpeckerServer) mustEmbedUnimplementedWoodpeckerServer() {
	_m.Called()
}

// MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedWoodpeckerServer'
type MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedWoodpeckerServer is a helper method to define mock.On call
func (_e *MockWoodpeckerServer_Expecter) mustEmbedUnimplementedWoodpeckerServer() *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call {
	return &MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call{Call: _e.mock.On("mustEmbedUnimplementedWoodpeckerServer")}
}

func (_c *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call) Run(run func()) *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call) Return() *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call) RunAndReturn(run func()) *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call {
	_c.Run(run)
	return _c
}

// NewMockWoodpeckerServer creates a new instance of MockWoodpeckerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWoodpeckerServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWoodpeckerServer {
	mock := &MockWoodpeckerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
