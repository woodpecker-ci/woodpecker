// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.woodpecker-ci.org/woodpecker/v3/pipeline/rpc/proto"
)

// NewMockWoodpeckerServer creates a new instance of MockWoodpeckerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWoodpeckerServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWoodpeckerServer {
	mock := &MockWoodpeckerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWoodpeckerServer is an autogenerated mock type for the WoodpeckerServer type
type MockWoodpeckerServer struct {
	mock.Mock
}

type MockWoodpeckerServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWoodpeckerServer) EXPECT() *MockWoodpeckerServer_Expecter {
	return &MockWoodpeckerServer_Expecter{mock: &_m.Mock}
}

// Done provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) Done(context1 context.Context, doneRequest *proto.DoneRequest) (*proto.Empty, error) {
	ret := _mock.Called(context1, doneRequest)

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 *proto.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DoneRequest) (*proto.Empty, error)); ok {
		return returnFunc(context1, doneRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DoneRequest) *proto.Empty); ok {
		r0 = returnFunc(context1, doneRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DoneRequest) error); ok {
		r1 = returnFunc(context1, doneRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockWoodpeckerServer_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
//   - context1 context.Context
//   - doneRequest *proto.DoneRequest
func (_e *MockWoodpeckerServer_Expecter) Done(context1 interface{}, doneRequest interface{}) *MockWoodpeckerServer_Done_Call {
	return &MockWoodpeckerServer_Done_Call{Call: _e.mock.On("Done", context1, doneRequest)}
}

func (_c *MockWoodpeckerServer_Done_Call) Run(run func(context1 context.Context, doneRequest *proto.DoneRequest)) *MockWoodpeckerServer_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DoneRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DoneRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_Done_Call) Return(empty *proto.Empty, err error) *MockWoodpeckerServer_Done_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockWoodpeckerServer_Done_Call) RunAndReturn(run func(context1 context.Context, doneRequest *proto.DoneRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Extend provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) Extend(context1 context.Context, extendRequest *proto.ExtendRequest) (*proto.Empty, error) {
	ret := _mock.Called(context1, extendRequest)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 *proto.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExtendRequest) (*proto.Empty, error)); ok {
		return returnFunc(context1, extendRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExtendRequest) *proto.Empty); ok {
		r0 = returnFunc(context1, extendRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ExtendRequest) error); ok {
		r1 = returnFunc(context1, extendRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_Extend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extend'
type MockWoodpeckerServer_Extend_Call struct {
	*mock.Call
}

// Extend is a helper method to define mock.On call
//   - context1 context.Context
//   - extendRequest *proto.ExtendRequest
func (_e *MockWoodpeckerServer_Expecter) Extend(context1 interface{}, extendRequest interface{}) *MockWoodpeckerServer_Extend_Call {
	return &MockWoodpeckerServer_Extend_Call{Call: _e.mock.On("Extend", context1, extendRequest)}
}

func (_c *MockWoodpeckerServer_Extend_Call) Run(run func(context1 context.Context, extendRequest *proto.ExtendRequest)) *MockWoodpeckerServer_Extend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ExtendRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ExtendRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_Extend_Call) Return(empty *proto.Empty, err error) *MockWoodpeckerServer_Extend_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockWoodpeckerServer_Extend_Call) RunAndReturn(run func(context1 context.Context, extendRequest *proto.ExtendRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Extend_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) Init(context1 context.Context, initRequest *proto.InitRequest) (*proto.Empty, error) {
	ret := _mock.Called(context1, initRequest)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 *proto.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.InitRequest) (*proto.Empty, error)); ok {
		return returnFunc(context1, initRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.InitRequest) *proto.Empty); ok {
		r0 = returnFunc(context1, initRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.InitRequest) error); ok {
		r1 = returnFunc(context1, initRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockWoodpeckerServer_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - context1 context.Context
//   - initRequest *proto.InitRequest
func (_e *MockWoodpeckerServer_Expecter) Init(context1 interface{}, initRequest interface{}) *MockWoodpeckerServer_Init_Call {
	return &MockWoodpeckerServer_Init_Call{Call: _e.mock.On("Init", context1, initRequest)}
}

func (_c *MockWoodpeckerServer_Init_Call) Run(run func(context1 context.Context, initRequest *proto.InitRequest)) *MockWoodpeckerServer_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.InitRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.InitRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_Init_Call) Return(empty *proto.Empty, err error) *MockWoodpeckerServer_Init_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockWoodpeckerServer_Init_Call) RunAndReturn(run func(context1 context.Context, initRequest *proto.InitRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) Log(context1 context.Context, logRequest *proto.LogRequest) (*proto.Empty, error) {
	ret := _mock.Called(context1, logRequest)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 *proto.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.LogRequest) (*proto.Empty, error)); ok {
		return returnFunc(context1, logRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.LogRequest) *proto.Empty); ok {
		r0 = returnFunc(context1, logRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.LogRequest) error); ok {
		r1 = returnFunc(context1, logRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockWoodpeckerServer_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - context1 context.Context
//   - logRequest *proto.LogRequest
func (_e *MockWoodpeckerServer_Expecter) Log(context1 interface{}, logRequest interface{}) *MockWoodpeckerServer_Log_Call {
	return &MockWoodpeckerServer_Log_Call{Call: _e.mock.On("Log", context1, logRequest)}
}

func (_c *MockWoodpeckerServer_Log_Call) Run(run func(context1 context.Context, logRequest *proto.LogRequest)) *MockWoodpeckerServer_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.LogRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.LogRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_Log_Call) Return(empty *proto.Empty, err error) *MockWoodpeckerServer_Log_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockWoodpeckerServer_Log_Call) RunAndReturn(run func(context1 context.Context, logRequest *proto.LogRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) Next(context1 context.Context, nextRequest *proto.NextRequest) (*proto.NextResponse, error) {
	ret := _mock.Called(context1, nextRequest)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *proto.NextResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.NextRequest) (*proto.NextResponse, error)); ok {
		return returnFunc(context1, nextRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.NextRequest) *proto.NextResponse); ok {
		r0 = returnFunc(context1, nextRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NextResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.NextRequest) error); ok {
		r1 = returnFunc(context1, nextRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockWoodpeckerServer_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - context1 context.Context
//   - nextRequest *proto.NextRequest
func (_e *MockWoodpeckerServer_Expecter) Next(context1 interface{}, nextRequest interface{}) *MockWoodpeckerServer_Next_Call {
	return &MockWoodpeckerServer_Next_Call{Call: _e.mock.On("Next", context1, nextRequest)}
}

func (_c *MockWoodpeckerServer_Next_Call) Run(run func(context1 context.Context, nextRequest *proto.NextRequest)) *MockWoodpeckerServer_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.NextRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.NextRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_Next_Call) Return(nextResponse *proto.NextResponse, err error) *MockWoodpeckerServer_Next_Call {
	_c.Call.Return(nextResponse, err)
	return _c
}

func (_c *MockWoodpeckerServer_Next_Call) RunAndReturn(run func(context1 context.Context, nextRequest *proto.NextRequest) (*proto.NextResponse, error)) *MockWoodpeckerServer_Next_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAgent provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) RegisterAgent(context1 context.Context, registerAgentRequest *proto.RegisterAgentRequest) (*proto.RegisterAgentResponse, error) {
	ret := _mock.Called(context1, registerAgentRequest)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAgent")
	}

	var r0 *proto.RegisterAgentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RegisterAgentRequest) (*proto.RegisterAgentResponse, error)); ok {
		return returnFunc(context1, registerAgentRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RegisterAgentRequest) *proto.RegisterAgentResponse); ok {
		r0 = returnFunc(context1, registerAgentRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterAgentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RegisterAgentRequest) error); ok {
		r1 = returnFunc(context1, registerAgentRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_RegisterAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAgent'
type MockWoodpeckerServer_RegisterAgent_Call struct {
	*mock.Call
}

// RegisterAgent is a helper method to define mock.On call
//   - context1 context.Context
//   - registerAgentRequest *proto.RegisterAgentRequest
func (_e *MockWoodpeckerServer_Expecter) RegisterAgent(context1 interface{}, registerAgentRequest interface{}) *MockWoodpeckerServer_RegisterAgent_Call {
	return &MockWoodpeckerServer_RegisterAgent_Call{Call: _e.mock.On("RegisterAgent", context1, registerAgentRequest)}
}

func (_c *MockWoodpeckerServer_RegisterAgent_Call) Run(run func(context1 context.Context, registerAgentRequest *proto.RegisterAgentRequest)) *MockWoodpeckerServer_RegisterAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RegisterAgentRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RegisterAgentRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_RegisterAgent_Call) Return(registerAgentResponse *proto.RegisterAgentResponse, err error) *MockWoodpeckerServer_RegisterAgent_Call {
	_c.Call.Return(registerAgentResponse, err)
	return _c
}

func (_c *MockWoodpeckerServer_RegisterAgent_Call) RunAndReturn(run func(context1 context.Context, registerAgentRequest *proto.RegisterAgentRequest) (*proto.RegisterAgentResponse, error)) *MockWoodpeckerServer_RegisterAgent_Call {
	_c.Call.Return(run)
	return _c
}

// ReportHealth provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) ReportHealth(context1 context.Context, reportHealthRequest *proto.ReportHealthRequest) (*proto.Empty, error) {
	ret := _mock.Called(context1, reportHealthRequest)

	if len(ret) == 0 {
		panic("no return value specified for ReportHealth")
	}

	var r0 *proto.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ReportHealthRequest) (*proto.Empty, error)); ok {
		return returnFunc(context1, reportHealthRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ReportHealthRequest) *proto.Empty); ok {
		r0 = returnFunc(context1, reportHealthRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ReportHealthRequest) error); ok {
		r1 = returnFunc(context1, reportHealthRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_ReportHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportHealth'
type MockWoodpeckerServer_ReportHealth_Call struct {
	*mock.Call
}

// ReportHealth is a helper method to define mock.On call
//   - context1 context.Context
//   - reportHealthRequest *proto.ReportHealthRequest
func (_e *MockWoodpeckerServer_Expecter) ReportHealth(context1 interface{}, reportHealthRequest interface{}) *MockWoodpeckerServer_ReportHealth_Call {
	return &MockWoodpeckerServer_ReportHealth_Call{Call: _e.mock.On("ReportHealth", context1, reportHealthRequest)}
}

func (_c *MockWoodpeckerServer_ReportHealth_Call) Run(run func(context1 context.Context, reportHealthRequest *proto.ReportHealthRequest)) *MockWoodpeckerServer_ReportHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ReportHealthRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ReportHealthRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_ReportHealth_Call) Return(empty *proto.Empty, err error) *MockWoodpeckerServer_ReportHealth_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockWoodpeckerServer_ReportHealth_Call) RunAndReturn(run func(context1 context.Context, reportHealthRequest *proto.ReportHealthRequest) (*proto.Empty, error)) *MockWoodpeckerServer_ReportHealth_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterAgent provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) UnregisterAgent(context1 context.Context, empty *proto.Empty) (*proto.Empty, error) {
	ret := _mock.Called(context1, empty)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterAgent")
	}

	var r0 *proto.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.Empty) (*proto.Empty, error)); ok {
		return returnFunc(context1, empty)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.Empty) *proto.Empty); ok {
		r0 = returnFunc(context1, empty)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.Empty) error); ok {
		r1 = returnFunc(context1, empty)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_UnregisterAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterAgent'
type MockWoodpeckerServer_UnregisterAgent_Call struct {
	*mock.Call
}

// UnregisterAgent is a helper method to define mock.On call
//   - context1 context.Context
//   - empty *proto.Empty
func (_e *MockWoodpeckerServer_Expecter) UnregisterAgent(context1 interface{}, empty interface{}) *MockWoodpeckerServer_UnregisterAgent_Call {
	return &MockWoodpeckerServer_UnregisterAgent_Call{Call: _e.mock.On("UnregisterAgent", context1, empty)}
}

func (_c *MockWoodpeckerServer_UnregisterAgent_Call) Run(run func(context1 context.Context, empty *proto.Empty)) *MockWoodpeckerServer_UnregisterAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.Empty
		if args[1] != nil {
			arg1 = args[1].(*proto.Empty)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_UnregisterAgent_Call) Return(empty1 *proto.Empty, err error) *MockWoodpeckerServer_UnregisterAgent_Call {
	_c.Call.Return(empty1, err)
	return _c
}

func (_c *MockWoodpeckerServer_UnregisterAgent_Call) RunAndReturn(run func(context1 context.Context, empty *proto.Empty) (*proto.Empty, error)) *MockWoodpeckerServer_UnregisterAgent_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) Update(context1 context.Context, updateRequest *proto.UpdateRequest) (*proto.Empty, error) {
	ret := _mock.Called(context1, updateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *proto.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateRequest) (*proto.Empty, error)); ok {
		return returnFunc(context1, updateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateRequest) *proto.Empty); ok {
		r0 = returnFunc(context1, updateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateRequest) error); ok {
		r1 = returnFunc(context1, updateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockWoodpeckerServer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - updateRequest *proto.UpdateRequest
func (_e *MockWoodpeckerServer_Expecter) Update(context1 interface{}, updateRequest interface{}) *MockWoodpeckerServer_Update_Call {
	return &MockWoodpeckerServer_Update_Call{Call: _e.mock.On("Update", context1, updateRequest)}
}

func (_c *MockWoodpeckerServer_Update_Call) Run(run func(context1 context.Context, updateRequest *proto.UpdateRequest)) *MockWoodpeckerServer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_Update_Call) Return(empty *proto.Empty, err error) *MockWoodpeckerServer_Update_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockWoodpeckerServer_Update_Call) RunAndReturn(run func(context1 context.Context, updateRequest *proto.UpdateRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) Version(context1 context.Context, empty *proto.Empty) (*proto.VersionResponse, error) {
	ret := _mock.Called(context1, empty)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 *proto.VersionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.Empty) (*proto.VersionResponse, error)); ok {
		return returnFunc(context1, empty)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.Empty) *proto.VersionResponse); ok {
		r0 = returnFunc(context1, empty)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.VersionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.Empty) error); ok {
		r1 = returnFunc(context1, empty)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockWoodpeckerServer_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - context1 context.Context
//   - empty *proto.Empty
func (_e *MockWoodpeckerServer_Expecter) Version(context1 interface{}, empty interface{}) *MockWoodpeckerServer_Version_Call {
	return &MockWoodpeckerServer_Version_Call{Call: _e.mock.On("Version", context1, empty)}
}

func (_c *MockWoodpeckerServer_Version_Call) Run(run func(context1 context.Context, empty *proto.Empty)) *MockWoodpeckerServer_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.Empty
		if args[1] != nil {
			arg1 = args[1].(*proto.Empty)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_Version_Call) Return(versionResponse *proto.VersionResponse, err error) *MockWoodpeckerServer_Version_Call {
	_c.Call.Return(versionResponse, err)
	return _c
}

func (_c *MockWoodpeckerServer_Version_Call) RunAndReturn(run func(context1 context.Context, empty *proto.Empty) (*proto.VersionResponse, error)) *MockWoodpeckerServer_Version_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) Wait(context1 context.Context, waitRequest *proto.WaitRequest) (*proto.Empty, error) {
	ret := _mock.Called(context1, waitRequest)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 *proto.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WaitRequest) (*proto.Empty, error)); ok {
		return returnFunc(context1, waitRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WaitRequest) *proto.Empty); ok {
		r0 = returnFunc(context1, waitRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.WaitRequest) error); ok {
		r1 = returnFunc(context1, waitRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWoodpeckerServer_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockWoodpeckerServer_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - context1 context.Context
//   - waitRequest *proto.WaitRequest
func (_e *MockWoodpeckerServer_Expecter) Wait(context1 interface{}, waitRequest interface{}) *MockWoodpeckerServer_Wait_Call {
	return &MockWoodpeckerServer_Wait_Call{Call: _e.mock.On("Wait", context1, waitRequest)}
}

func (_c *MockWoodpeckerServer_Wait_Call) Run(run func(context1 context.Context, waitRequest *proto.WaitRequest)) *MockWoodpeckerServer_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.WaitRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.WaitRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWoodpeckerServer_Wait_Call) Return(empty *proto.Empty, err error) *MockWoodpeckerServer_Wait_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockWoodpeckerServer_Wait_Call) RunAndReturn(run func(context1 context.Context, waitRequest *proto.WaitRequest) (*proto.Empty, error)) *MockWoodpeckerServer_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedWoodpeckerServer provides a mock function for the type MockWoodpeckerServer
func (_mock *MockWoodpeckerServer) mustEmbedUnimplementedWoodpeckerServer() {
	_mock.Called()
	return
}

// MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedWoodpeckerServer'
type MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedWoodpeckerServer is a helper method to define mock.On call
func (_e *MockWoodpeckerServer_Expecter) mustEmbedUnimplementedWoodpeckerServer() *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call {
	return &MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call{Call: _e.mock.On("mustEmbedUnimplementedWoodpeckerServer")}
}

func (_c *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call) Run(run func()) *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call) Return() *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call) RunAndReturn(run func()) *MockWoodpeckerServer_mustEmbedUnimplementedWoodpeckerServer_Call {
	_c.Run(run)
	return _c
}
