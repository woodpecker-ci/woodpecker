// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "go.woodpecker-ci.org/woodpecker/v3/pipeline/rpc/proto"
)

// MockWoodpeckerClient is an autogenerated mock type for the WoodpeckerClient type
type MockWoodpeckerClient struct {
	mock.Mock
}

type MockWoodpeckerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWoodpeckerClient) EXPECT() *MockWoodpeckerClient_Expecter {
	return &MockWoodpeckerClient_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) Done(ctx context.Context, in *proto.DoneRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DoneRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DoneRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.DoneRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockWoodpeckerClient_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DoneRequest
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) Done(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_Done_Call {
	return &MockWoodpeckerClient_Done_Call{Call: _e.mock.On("Done",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_Done_Call) Run(run func(ctx context.Context, in *proto.DoneRequest, opts ...grpc.CallOption)) *MockWoodpeckerClient_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.DoneRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_Done_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerClient_Done_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_Done_Call) RunAndReturn(run func(context.Context, *proto.DoneRequest, ...grpc.CallOption) (*proto.Empty, error)) *MockWoodpeckerClient_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Extend provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) Extend(ctx context.Context, in *proto.ExtendRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Extend")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ExtendRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ExtendRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ExtendRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_Extend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extend'
type MockWoodpeckerClient_Extend_Call struct {
	*mock.Call
}

// Extend is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ExtendRequest
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) Extend(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_Extend_Call {
	return &MockWoodpeckerClient_Extend_Call{Call: _e.mock.On("Extend",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_Extend_Call) Run(run func(ctx context.Context, in *proto.ExtendRequest, opts ...grpc.CallOption)) *MockWoodpeckerClient_Extend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.ExtendRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_Extend_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerClient_Extend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_Extend_Call) RunAndReturn(run func(context.Context, *proto.ExtendRequest, ...grpc.CallOption) (*proto.Empty, error)) *MockWoodpeckerClient_Extend_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) Init(ctx context.Context, in *proto.InitRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InitRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.InitRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.InitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockWoodpeckerClient_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.InitRequest
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) Init(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_Init_Call {
	return &MockWoodpeckerClient_Init_Call{Call: _e.mock.On("Init",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_Init_Call) Run(run func(ctx context.Context, in *proto.InitRequest, opts ...grpc.CallOption)) *MockWoodpeckerClient_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.InitRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_Init_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerClient_Init_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_Init_Call) RunAndReturn(run func(context.Context, *proto.InitRequest, ...grpc.CallOption) (*proto.Empty, error)) *MockWoodpeckerClient_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) Log(ctx context.Context, in *proto.LogRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LogRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockWoodpeckerClient_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.LogRequest
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) Log(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_Log_Call {
	return &MockWoodpeckerClient_Log_Call{Call: _e.mock.On("Log",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_Log_Call) Run(run func(ctx context.Context, in *proto.LogRequest, opts ...grpc.CallOption)) *MockWoodpeckerClient_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.LogRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_Log_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerClient_Log_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_Log_Call) RunAndReturn(run func(context.Context, *proto.LogRequest, ...grpc.CallOption) (*proto.Empty, error)) *MockWoodpeckerClient_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) Next(ctx context.Context, in *proto.NextRequest, opts ...grpc.CallOption) (*proto.NextResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *proto.NextResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NextRequest, ...grpc.CallOption) (*proto.NextResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NextRequest, ...grpc.CallOption) *proto.NextResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NextResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.NextRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockWoodpeckerClient_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.NextRequest
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) Next(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_Next_Call {
	return &MockWoodpeckerClient_Next_Call{Call: _e.mock.On("Next",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_Next_Call) Run(run func(ctx context.Context, in *proto.NextRequest, opts ...grpc.CallOption)) *MockWoodpeckerClient_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.NextRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_Next_Call) Return(_a0 *proto.NextResponse, _a1 error) *MockWoodpeckerClient_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_Next_Call) RunAndReturn(run func(context.Context, *proto.NextRequest, ...grpc.CallOption) (*proto.NextResponse, error)) *MockWoodpeckerClient_Next_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAgent provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) RegisterAgent(ctx context.Context, in *proto.RegisterAgentRequest, opts ...grpc.CallOption) (*proto.RegisterAgentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAgent")
	}

	var r0 *proto.RegisterAgentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterAgentRequest, ...grpc.CallOption) (*proto.RegisterAgentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterAgentRequest, ...grpc.CallOption) *proto.RegisterAgentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterAgentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.RegisterAgentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_RegisterAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAgent'
type MockWoodpeckerClient_RegisterAgent_Call struct {
	*mock.Call
}

// RegisterAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RegisterAgentRequest
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) RegisterAgent(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_RegisterAgent_Call {
	return &MockWoodpeckerClient_RegisterAgent_Call{Call: _e.mock.On("RegisterAgent",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_RegisterAgent_Call) Run(run func(ctx context.Context, in *proto.RegisterAgentRequest, opts ...grpc.CallOption)) *MockWoodpeckerClient_RegisterAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.RegisterAgentRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_RegisterAgent_Call) Return(_a0 *proto.RegisterAgentResponse, _a1 error) *MockWoodpeckerClient_RegisterAgent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_RegisterAgent_Call) RunAndReturn(run func(context.Context, *proto.RegisterAgentRequest, ...grpc.CallOption) (*proto.RegisterAgentResponse, error)) *MockWoodpeckerClient_RegisterAgent_Call {
	_c.Call.Return(run)
	return _c
}

// ReportHealth provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) ReportHealth(ctx context.Context, in *proto.ReportHealthRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReportHealth")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReportHealthRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReportHealthRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ReportHealthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_ReportHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportHealth'
type MockWoodpeckerClient_ReportHealth_Call struct {
	*mock.Call
}

// ReportHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ReportHealthRequest
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) ReportHealth(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_ReportHealth_Call {
	return &MockWoodpeckerClient_ReportHealth_Call{Call: _e.mock.On("ReportHealth",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_ReportHealth_Call) Run(run func(ctx context.Context, in *proto.ReportHealthRequest, opts ...grpc.CallOption)) *MockWoodpeckerClient_ReportHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.ReportHealthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_ReportHealth_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerClient_ReportHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_ReportHealth_Call) RunAndReturn(run func(context.Context, *proto.ReportHealthRequest, ...grpc.CallOption) (*proto.Empty, error)) *MockWoodpeckerClient_ReportHealth_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterAgent provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) UnregisterAgent(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterAgent")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_UnregisterAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterAgent'
type MockWoodpeckerClient_UnregisterAgent_Call struct {
	*mock.Call
}

// UnregisterAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.Empty
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) UnregisterAgent(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_UnregisterAgent_Call {
	return &MockWoodpeckerClient_UnregisterAgent_Call{Call: _e.mock.On("UnregisterAgent",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_UnregisterAgent_Call) Run(run func(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption)) *MockWoodpeckerClient_UnregisterAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.Empty), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_UnregisterAgent_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerClient_UnregisterAgent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_UnregisterAgent_Call) RunAndReturn(run func(context.Context, *proto.Empty, ...grpc.CallOption) (*proto.Empty, error)) *MockWoodpeckerClient_UnregisterAgent_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) Update(ctx context.Context, in *proto.UpdateRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.UpdateRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.UpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockWoodpeckerClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateRequest
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) Update(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_Update_Call {
	return &MockWoodpeckerClient_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_Update_Call) Run(run func(ctx context.Context, in *proto.UpdateRequest, opts ...grpc.CallOption)) *MockWoodpeckerClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.UpdateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_Update_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_Update_Call) RunAndReturn(run func(context.Context, *proto.UpdateRequest, ...grpc.CallOption) (*proto.Empty, error)) *MockWoodpeckerClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) Version(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption) (*proto.VersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 *proto.VersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) (*proto.VersionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Empty, ...grpc.CallOption) *proto.VersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.VersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockWoodpeckerClient_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.Empty
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) Version(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_Version_Call {
	return &MockWoodpeckerClient_Version_Call{Call: _e.mock.On("Version",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_Version_Call) Run(run func(ctx context.Context, in *proto.Empty, opts ...grpc.CallOption)) *MockWoodpeckerClient_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.Empty), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_Version_Call) Return(_a0 *proto.VersionResponse, _a1 error) *MockWoodpeckerClient_Version_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_Version_Call) RunAndReturn(run func(context.Context, *proto.Empty, ...grpc.CallOption) (*proto.VersionResponse, error)) *MockWoodpeckerClient_Version_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields: ctx, in, opts
func (_m *MockWoodpeckerClient) Wait(ctx context.Context, in *proto.WaitRequest, opts ...grpc.CallOption) (*proto.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 *proto.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WaitRequest, ...grpc.CallOption) (*proto.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WaitRequest, ...grpc.CallOption) *proto.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.WaitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWoodpeckerClient_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockWoodpeckerClient_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.WaitRequest
//   - opts ...grpc.CallOption
func (_e *MockWoodpeckerClient_Expecter) Wait(ctx interface{}, in interface{}, opts ...interface{}) *MockWoodpeckerClient_Wait_Call {
	return &MockWoodpeckerClient_Wait_Call{Call: _e.mock.On("Wait",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWoodpeckerClient_Wait_Call) Run(run func(ctx context.Context, in *proto.WaitRequest, opts ...grpc.CallOption)) *MockWoodpeckerClient_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.WaitRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWoodpeckerClient_Wait_Call) Return(_a0 *proto.Empty, _a1 error) *MockWoodpeckerClient_Wait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWoodpeckerClient_Wait_Call) RunAndReturn(run func(context.Context, *proto.WaitRequest, ...grpc.CallOption) (*proto.Empty, error)) *MockWoodpeckerClient_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWoodpeckerClient creates a new instance of MockWoodpeckerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWoodpeckerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWoodpeckerClient {
	mock := &MockWoodpeckerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
