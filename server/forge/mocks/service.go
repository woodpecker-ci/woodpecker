// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	forge "go.woodpecker-ci.org/woodpecker/v2/server/forge"

	model "go.woodpecker-ci.org/woodpecker/v2/server/model"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// FromRepo provides a mock function with given fields: repo
func (_m *Service) FromRepo(repo *model.Repo) (forge.Forge, error) {
	ret := _m.Called(repo)

	if len(ret) == 0 {
		panic("no return value specified for FromRepo")
	}

	var r0 forge.Forge
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Repo) (forge.Forge, error)); ok {
		return rf(repo)
	}
	if rf, ok := ret.Get(0).(func(*model.Repo) forge.Forge); ok {
		r0 = rf(repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(forge.Forge)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Repo) error); ok {
		r1 = rf(repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FromUser provides a mock function with given fields: user
func (_m *Service) FromUser(user *model.User) (forge.Forge, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for FromUser")
	}

	var r0 forge.Forge
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.User) (forge.Forge, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*model.User) forge.Forge); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(forge.Forge)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Main provides a mock function with given fields:
func (_m *Service) Main() (forge.Forge, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Main")
	}

	var r0 forge.Forge
	var r1 error
	if rf, ok := ret.Get(0).(func() (forge.Forge, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() forge.Forge); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(forge.Forge)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
