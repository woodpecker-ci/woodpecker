// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "go.woodpecker-ci.org/woodpecker/v3/server/model"
)

// MockFilterFn is an autogenerated mock type for the FilterFn type
type MockFilterFn struct {
	mock.Mock
}

type MockFilterFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilterFn) EXPECT() *MockFilterFn_Expecter {
	return &MockFilterFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockFilterFn) Execute(_a0 *model.Task) (bool, int) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 int
	if rf, ok := ret.Get(0).(func(*model.Task) (bool, int)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Task) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*model.Task) int); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// MockFilterFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockFilterFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *model.Task
func (_e *MockFilterFn_Expecter) Execute(_a0 interface{}) *MockFilterFn_Execute_Call {
	return &MockFilterFn_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockFilterFn_Execute_Call) Run(run func(_a0 *model.Task)) *MockFilterFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Task))
	})
	return _c
}

func (_c *MockFilterFn_Execute_Call) Return(_a0 bool, _a1 int) *MockFilterFn_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFilterFn_Execute_Call) RunAndReturn(run func(*model.Task) (bool, int)) *MockFilterFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilterFn creates a new instance of MockFilterFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilterFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilterFn {
	mock := &MockFilterFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
