// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"go.woodpecker-ci.org/woodpecker/v3/server/services/encryption/types"
)

// NewMockEncryptionClient creates a new instance of MockEncryptionClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncryptionClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncryptionClient {
	mock := &MockEncryptionClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEncryptionClient is an autogenerated mock type for the EncryptionClient type
type MockEncryptionClient struct {
	mock.Mock
}

type MockEncryptionClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncryptionClient) EXPECT() *MockEncryptionClient_Expecter {
	return &MockEncryptionClient_Expecter{mock: &_m.Mock}
}

// EnableEncryption provides a mock function for the type MockEncryptionClient
func (_mock *MockEncryptionClient) EnableEncryption() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnableEncryption")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEncryptionClient_EnableEncryption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableEncryption'
type MockEncryptionClient_EnableEncryption_Call struct {
	*mock.Call
}

// EnableEncryption is a helper method to define mock.On call
func (_e *MockEncryptionClient_Expecter) EnableEncryption() *MockEncryptionClient_EnableEncryption_Call {
	return &MockEncryptionClient_EnableEncryption_Call{Call: _e.mock.On("EnableEncryption")}
}

func (_c *MockEncryptionClient_EnableEncryption_Call) Run(run func()) *MockEncryptionClient_EnableEncryption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionClient_EnableEncryption_Call) Return(err error) *MockEncryptionClient_EnableEncryption_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEncryptionClient_EnableEncryption_Call) RunAndReturn(run func() error) *MockEncryptionClient_EnableEncryption_Call {
	_c.Call.Return(run)
	return _c
}

// MigrateEncryption provides a mock function for the type MockEncryptionClient
func (_mock *MockEncryptionClient) MigrateEncryption(newEncryption types.EncryptionService) error {
	ret := _mock.Called(newEncryption)

	if len(ret) == 0 {
		panic("no return value specified for MigrateEncryption")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.EncryptionService) error); ok {
		r0 = returnFunc(newEncryption)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEncryptionClient_MigrateEncryption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MigrateEncryption'
type MockEncryptionClient_MigrateEncryption_Call struct {
	*mock.Call
}

// MigrateEncryption is a helper method to define mock.On call
//   - newEncryption types.EncryptionService
func (_e *MockEncryptionClient_Expecter) MigrateEncryption(newEncryption interface{}) *MockEncryptionClient_MigrateEncryption_Call {
	return &MockEncryptionClient_MigrateEncryption_Call{Call: _e.mock.On("MigrateEncryption", newEncryption)}
}

func (_c *MockEncryptionClient_MigrateEncryption_Call) Run(run func(newEncryption types.EncryptionService)) *MockEncryptionClient_MigrateEncryption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.EncryptionService
		if args[0] != nil {
			arg0 = args[0].(types.EncryptionService)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEncryptionClient_MigrateEncryption_Call) Return(err error) *MockEncryptionClient_MigrateEncryption_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEncryptionClient_MigrateEncryption_Call) RunAndReturn(run func(newEncryption types.EncryptionService) error) *MockEncryptionClient_MigrateEncryption_Call {
	_c.Call.Return(run)
	return _c
}

// SetEncryptionService provides a mock function for the type MockEncryptionClient
func (_mock *MockEncryptionClient) SetEncryptionService(encryption types.EncryptionService) error {
	ret := _mock.Called(encryption)

	if len(ret) == 0 {
		panic("no return value specified for SetEncryptionService")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(types.EncryptionService) error); ok {
		r0 = returnFunc(encryption)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEncryptionClient_SetEncryptionService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEncryptionService'
type MockEncryptionClient_SetEncryptionService_Call struct {
	*mock.Call
}

// SetEncryptionService is a helper method to define mock.On call
//   - encryption types.EncryptionService
func (_e *MockEncryptionClient_Expecter) SetEncryptionService(encryption interface{}) *MockEncryptionClient_SetEncryptionService_Call {
	return &MockEncryptionClient_SetEncryptionService_Call{Call: _e.mock.On("SetEncryptionService", encryption)}
}

func (_c *MockEncryptionClient_SetEncryptionService_Call) Run(run func(encryption types.EncryptionService)) *MockEncryptionClient_SetEncryptionService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.EncryptionService
		if args[0] != nil {
			arg0 = args[0].(types.EncryptionService)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEncryptionClient_SetEncryptionService_Call) Return(err error) *MockEncryptionClient_SetEncryptionService_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEncryptionClient_SetEncryptionService_Call) RunAndReturn(run func(encryption types.EncryptionService) error) *MockEncryptionClient_SetEncryptionService_Call {
	_c.Call.Return(run)
	return _c
}
