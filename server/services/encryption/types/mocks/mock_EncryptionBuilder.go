// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	types "go.woodpecker-ci.org/woodpecker/v3/server/services/encryption/types"
)

// MockEncryptionBuilder is an autogenerated mock type for the EncryptionBuilder type
type MockEncryptionBuilder struct {
	mock.Mock
}

type MockEncryptionBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncryptionBuilder) EXPECT() *MockEncryptionBuilder_Expecter {
	return &MockEncryptionBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with no fields
func (_m *MockEncryptionBuilder) Build() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEncryptionBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockEncryptionBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *MockEncryptionBuilder_Expecter) Build() *MockEncryptionBuilder_Build_Call {
	return &MockEncryptionBuilder_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *MockEncryptionBuilder_Build_Call) Run(run func()) *MockEncryptionBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionBuilder_Build_Call) Return(_a0 error) *MockEncryptionBuilder_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionBuilder_Build_Call) RunAndReturn(run func() error) *MockEncryptionBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// WithClient provides a mock function with given fields: client
func (_m *MockEncryptionBuilder) WithClient(client types.EncryptionClient) types.EncryptionBuilder {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for WithClient")
	}

	var r0 types.EncryptionBuilder
	if rf, ok := ret.Get(0).(func(types.EncryptionClient) types.EncryptionBuilder); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.EncryptionBuilder)
		}
	}

	return r0
}

// MockEncryptionBuilder_WithClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithClient'
type MockEncryptionBuilder_WithClient_Call struct {
	*mock.Call
}

// WithClient is a helper method to define mock.On call
//   - client types.EncryptionClient
func (_e *MockEncryptionBuilder_Expecter) WithClient(client interface{}) *MockEncryptionBuilder_WithClient_Call {
	return &MockEncryptionBuilder_WithClient_Call{Call: _e.mock.On("WithClient", client)}
}

func (_c *MockEncryptionBuilder_WithClient_Call) Run(run func(client types.EncryptionClient)) *MockEncryptionBuilder_WithClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.EncryptionClient))
	})
	return _c
}

func (_c *MockEncryptionBuilder_WithClient_Call) Return(_a0 types.EncryptionBuilder) *MockEncryptionBuilder_WithClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionBuilder_WithClient_Call) RunAndReturn(run func(types.EncryptionClient) types.EncryptionBuilder) *MockEncryptionBuilder_WithClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncryptionBuilder creates a new instance of MockEncryptionBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncryptionBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncryptionBuilder {
	mock := &MockEncryptionBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
