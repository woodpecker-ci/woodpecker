// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockEncryptionService creates a new instance of MockEncryptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncryptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncryptionService {
	mock := &MockEncryptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEncryptionService is an autogenerated mock type for the EncryptionService type
type MockEncryptionService struct {
	mock.Mock
}

type MockEncryptionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncryptionService) EXPECT() *MockEncryptionService_Expecter {
	return &MockEncryptionService_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function for the type MockEncryptionService
func (_mock *MockEncryptionService) Decrypt(ciphertext string, associatedData string) (string, error) {
	ret := _mock.Called(ciphertext, associatedData)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(ciphertext, associatedData)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(ciphertext, associatedData)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(ciphertext, associatedData)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEncryptionService_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockEncryptionService_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - ciphertext string
//   - associatedData string
func (_e *MockEncryptionService_Expecter) Decrypt(ciphertext interface{}, associatedData interface{}) *MockEncryptionService_Decrypt_Call {
	return &MockEncryptionService_Decrypt_Call{Call: _e.mock.On("Decrypt", ciphertext, associatedData)}
}

func (_c *MockEncryptionService_Decrypt_Call) Run(run func(ciphertext string, associatedData string)) *MockEncryptionService_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEncryptionService_Decrypt_Call) Return(s string, err error) *MockEncryptionService_Decrypt_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEncryptionService_Decrypt_Call) RunAndReturn(run func(ciphertext string, associatedData string) (string, error)) *MockEncryptionService_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Disable provides a mock function for the type MockEncryptionService
func (_mock *MockEncryptionService) Disable() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Disable")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEncryptionService_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type MockEncryptionService_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
func (_e *MockEncryptionService_Expecter) Disable() *MockEncryptionService_Disable_Call {
	return &MockEncryptionService_Disable_Call{Call: _e.mock.On("Disable")}
}

func (_c *MockEncryptionService_Disable_Call) Run(run func()) *MockEncryptionService_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionService_Disable_Call) Return(err error) *MockEncryptionService_Disable_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEncryptionService_Disable_Call) RunAndReturn(run func() error) *MockEncryptionService_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function for the type MockEncryptionService
func (_mock *MockEncryptionService) Encrypt(plaintext string, associatedData string) (string, error) {
	ret := _mock.Called(plaintext, associatedData)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(plaintext, associatedData)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(plaintext, associatedData)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(plaintext, associatedData)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEncryptionService_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockEncryptionService_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - plaintext string
//   - associatedData string
func (_e *MockEncryptionService_Expecter) Encrypt(plaintext interface{}, associatedData interface{}) *MockEncryptionService_Encrypt_Call {
	return &MockEncryptionService_Encrypt_Call{Call: _e.mock.On("Encrypt", plaintext, associatedData)}
}

func (_c *MockEncryptionService_Encrypt_Call) Run(run func(plaintext string, associatedData string)) *MockEncryptionService_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEncryptionService_Encrypt_Call) Return(s string, err error) *MockEncryptionService_Encrypt_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEncryptionService_Encrypt_Call) RunAndReturn(run func(plaintext string, associatedData string) (string, error)) *MockEncryptionService_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}
