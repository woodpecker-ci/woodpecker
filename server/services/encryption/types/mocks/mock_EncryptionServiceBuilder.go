// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	types "go.woodpecker-ci.org/woodpecker/v3/server/services/encryption/types"
)

// MockEncryptionServiceBuilder is an autogenerated mock type for the EncryptionServiceBuilder type
type MockEncryptionServiceBuilder struct {
	mock.Mock
}

type MockEncryptionServiceBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncryptionServiceBuilder) EXPECT() *MockEncryptionServiceBuilder_Expecter {
	return &MockEncryptionServiceBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with no fields
func (_m *MockEncryptionServiceBuilder) Build() (types.EncryptionService, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 types.EncryptionService
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.EncryptionService, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.EncryptionService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.EncryptionService)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncryptionServiceBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockEncryptionServiceBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *MockEncryptionServiceBuilder_Expecter) Build() *MockEncryptionServiceBuilder_Build_Call {
	return &MockEncryptionServiceBuilder_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *MockEncryptionServiceBuilder_Build_Call) Run(run func()) *MockEncryptionServiceBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionServiceBuilder_Build_Call) Return(_a0 types.EncryptionService, _a1 error) *MockEncryptionServiceBuilder_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEncryptionServiceBuilder_Build_Call) RunAndReturn(run func() (types.EncryptionService, error)) *MockEncryptionServiceBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// WithClients provides a mock function with given fields: clients
func (_m *MockEncryptionServiceBuilder) WithClients(clients []types.EncryptionClient) types.EncryptionServiceBuilder {
	ret := _m.Called(clients)

	if len(ret) == 0 {
		panic("no return value specified for WithClients")
	}

	var r0 types.EncryptionServiceBuilder
	if rf, ok := ret.Get(0).(func([]types.EncryptionClient) types.EncryptionServiceBuilder); ok {
		r0 = rf(clients)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.EncryptionServiceBuilder)
		}
	}

	return r0
}

// MockEncryptionServiceBuilder_WithClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithClients'
type MockEncryptionServiceBuilder_WithClients_Call struct {
	*mock.Call
}

// WithClients is a helper method to define mock.On call
//   - clients []types.EncryptionClient
func (_e *MockEncryptionServiceBuilder_Expecter) WithClients(clients interface{}) *MockEncryptionServiceBuilder_WithClients_Call {
	return &MockEncryptionServiceBuilder_WithClients_Call{Call: _e.mock.On("WithClients", clients)}
}

func (_c *MockEncryptionServiceBuilder_WithClients_Call) Run(run func(clients []types.EncryptionClient)) *MockEncryptionServiceBuilder_WithClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]types.EncryptionClient))
	})
	return _c
}

func (_c *MockEncryptionServiceBuilder_WithClients_Call) Return(_a0 types.EncryptionServiceBuilder) *MockEncryptionServiceBuilder_WithClients_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionServiceBuilder_WithClients_Call) RunAndReturn(run func([]types.EncryptionClient) types.EncryptionServiceBuilder) *MockEncryptionServiceBuilder_WithClients_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEncryptionServiceBuilder creates a new instance of MockEncryptionServiceBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEncryptionServiceBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEncryptionServiceBuilder {
	mock := &MockEncryptionServiceBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
