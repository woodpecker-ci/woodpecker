// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	forge "go.woodpecker-ci.org/woodpecker/v3/server/forge"

	model "go.woodpecker-ci.org/woodpecker/v3/server/model"

	types "go.woodpecker-ci.org/woodpecker/v3/server/forge/types"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function with given fields: ctx, _a1, user, repo, pipeline, oldConfigData, restart
func (_m *MockService) Fetch(ctx context.Context, _a1 forge.Forge, user *model.User, repo *model.Repo, pipeline *model.Pipeline, oldConfigData []*types.FileMeta, restart bool) ([]*types.FileMeta, error) {
	ret := _m.Called(ctx, _a1, user, repo, pipeline, oldConfigData, restart)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []*types.FileMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, forge.Forge, *model.User, *model.Repo, *model.Pipeline, []*types.FileMeta, bool) ([]*types.FileMeta, error)); ok {
		return rf(ctx, _a1, user, repo, pipeline, oldConfigData, restart)
	}
	if rf, ok := ret.Get(0).(func(context.Context, forge.Forge, *model.User, *model.Repo, *model.Pipeline, []*types.FileMeta, bool) []*types.FileMeta); ok {
		r0 = rf(ctx, _a1, user, repo, pipeline, oldConfigData, restart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.FileMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, forge.Forge, *model.User, *model.Repo, *model.Pipeline, []*types.FileMeta, bool) error); ok {
		r1 = rf(ctx, _a1, user, repo, pipeline, oldConfigData, restart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockService_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 forge.Forge
//   - user *model.User
//   - repo *model.Repo
//   - pipeline *model.Pipeline
//   - oldConfigData []*types.FileMeta
//   - restart bool
func (_e *MockService_Expecter) Fetch(ctx interface{}, _a1 interface{}, user interface{}, repo interface{}, pipeline interface{}, oldConfigData interface{}, restart interface{}) *MockService_Fetch_Call {
	return &MockService_Fetch_Call{Call: _e.mock.On("Fetch", ctx, _a1, user, repo, pipeline, oldConfigData, restart)}
}

func (_c *MockService_Fetch_Call) Run(run func(ctx context.Context, _a1 forge.Forge, user *model.User, repo *model.Repo, pipeline *model.Pipeline, oldConfigData []*types.FileMeta, restart bool)) *MockService_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(forge.Forge), args[2].(*model.User), args[3].(*model.Repo), args[4].(*model.Pipeline), args[5].([]*types.FileMeta), args[6].(bool))
	})
	return _c
}

func (_c *MockService_Fetch_Call) Return(configData []*types.FileMeta, err error) *MockService_Fetch_Call {
	_c.Call.Return(configData, err)
	return _c
}

func (_c *MockService_Fetch_Call) RunAndReturn(run func(context.Context, forge.Forge, *model.User, *model.Repo, *model.Pipeline, []*types.FileMeta, bool) ([]*types.FileMeta, error)) *MockService_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
