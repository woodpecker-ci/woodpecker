// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "go.woodpecker-ci.org/woodpecker/v3/server/model"
)

// MockReadOnlyService is an autogenerated mock type for the ReadOnlyService type
type MockReadOnlyService struct {
	mock.Mock
}

type MockReadOnlyService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReadOnlyService) EXPECT() *MockReadOnlyService_Expecter {
	return &MockReadOnlyService_Expecter{mock: &_m.Mock}
}

// GlobalRegistryFind provides a mock function with given fields: _a0
func (_m *MockReadOnlyService) GlobalRegistryFind(_a0 string) (*model.Registry, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryFind")
	}

	var r0 *model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Registry, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Registry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReadOnlyService_GlobalRegistryFind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalRegistryFind'
type MockReadOnlyService_GlobalRegistryFind_Call struct {
	*mock.Call
}

// GlobalRegistryFind is a helper method to define mock.On call
//   - _a0 string
func (_e *MockReadOnlyService_Expecter) GlobalRegistryFind(_a0 interface{}) *MockReadOnlyService_GlobalRegistryFind_Call {
	return &MockReadOnlyService_GlobalRegistryFind_Call{Call: _e.mock.On("GlobalRegistryFind", _a0)}
}

func (_c *MockReadOnlyService_GlobalRegistryFind_Call) Run(run func(_a0 string)) *MockReadOnlyService_GlobalRegistryFind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockReadOnlyService_GlobalRegistryFind_Call) Return(_a0 *model.Registry, _a1 error) *MockReadOnlyService_GlobalRegistryFind_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReadOnlyService_GlobalRegistryFind_Call) RunAndReturn(run func(string) (*model.Registry, error)) *MockReadOnlyService_GlobalRegistryFind_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalRegistryList provides a mock function with given fields: _a0
func (_m *MockReadOnlyService) GlobalRegistryList(_a0 *model.ListOptions) ([]*model.Registry, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryList")
	}

	var r0 []*model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ListOptions) ([]*model.Registry, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.ListOptions) []*model.Registry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ListOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReadOnlyService_GlobalRegistryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalRegistryList'
type MockReadOnlyService_GlobalRegistryList_Call struct {
	*mock.Call
}

// GlobalRegistryList is a helper method to define mock.On call
//   - _a0 *model.ListOptions
func (_e *MockReadOnlyService_Expecter) GlobalRegistryList(_a0 interface{}) *MockReadOnlyService_GlobalRegistryList_Call {
	return &MockReadOnlyService_GlobalRegistryList_Call{Call: _e.mock.On("GlobalRegistryList", _a0)}
}

func (_c *MockReadOnlyService_GlobalRegistryList_Call) Run(run func(_a0 *model.ListOptions)) *MockReadOnlyService_GlobalRegistryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.ListOptions))
	})
	return _c
}

func (_c *MockReadOnlyService_GlobalRegistryList_Call) Return(_a0 []*model.Registry, _a1 error) *MockReadOnlyService_GlobalRegistryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReadOnlyService_GlobalRegistryList_Call) RunAndReturn(run func(*model.ListOptions) ([]*model.Registry, error)) *MockReadOnlyService_GlobalRegistryList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReadOnlyService creates a new instance of MockReadOnlyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReadOnlyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReadOnlyService {
	mock := &MockReadOnlyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
