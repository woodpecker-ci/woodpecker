// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "go.woodpecker-ci.org/woodpecker/v3/server/model"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GlobalRegistryCreate provides a mock function with given fields: _a0
func (_m *MockService) GlobalRegistryCreate(_a0 *model.Registry) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Registry) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_GlobalRegistryCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalRegistryCreate'
type MockService_GlobalRegistryCreate_Call struct {
	*mock.Call
}

// GlobalRegistryCreate is a helper method to define mock.On call
//   - _a0 *model.Registry
func (_e *MockService_Expecter) GlobalRegistryCreate(_a0 interface{}) *MockService_GlobalRegistryCreate_Call {
	return &MockService_GlobalRegistryCreate_Call{Call: _e.mock.On("GlobalRegistryCreate", _a0)}
}

func (_c *MockService_GlobalRegistryCreate_Call) Run(run func(_a0 *model.Registry)) *MockService_GlobalRegistryCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Registry))
	})
	return _c
}

func (_c *MockService_GlobalRegistryCreate_Call) Return(_a0 error) *MockService_GlobalRegistryCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GlobalRegistryCreate_Call) RunAndReturn(run func(*model.Registry) error) *MockService_GlobalRegistryCreate_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalRegistryDelete provides a mock function with given fields: _a0
func (_m *MockService) GlobalRegistryDelete(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_GlobalRegistryDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalRegistryDelete'
type MockService_GlobalRegistryDelete_Call struct {
	*mock.Call
}

// GlobalRegistryDelete is a helper method to define mock.On call
//   - _a0 string
func (_e *MockService_Expecter) GlobalRegistryDelete(_a0 interface{}) *MockService_GlobalRegistryDelete_Call {
	return &MockService_GlobalRegistryDelete_Call{Call: _e.mock.On("GlobalRegistryDelete", _a0)}
}

func (_c *MockService_GlobalRegistryDelete_Call) Run(run func(_a0 string)) *MockService_GlobalRegistryDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_GlobalRegistryDelete_Call) Return(_a0 error) *MockService_GlobalRegistryDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GlobalRegistryDelete_Call) RunAndReturn(run func(string) error) *MockService_GlobalRegistryDelete_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalRegistryFind provides a mock function with given fields: _a0
func (_m *MockService) GlobalRegistryFind(_a0 string) (*model.Registry, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryFind")
	}

	var r0 *model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Registry, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Registry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GlobalRegistryFind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalRegistryFind'
type MockService_GlobalRegistryFind_Call struct {
	*mock.Call
}

// GlobalRegistryFind is a helper method to define mock.On call
//   - _a0 string
func (_e *MockService_Expecter) GlobalRegistryFind(_a0 interface{}) *MockService_GlobalRegistryFind_Call {
	return &MockService_GlobalRegistryFind_Call{Call: _e.mock.On("GlobalRegistryFind", _a0)}
}

func (_c *MockService_GlobalRegistryFind_Call) Run(run func(_a0 string)) *MockService_GlobalRegistryFind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_GlobalRegistryFind_Call) Return(_a0 *model.Registry, _a1 error) *MockService_GlobalRegistryFind_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GlobalRegistryFind_Call) RunAndReturn(run func(string) (*model.Registry, error)) *MockService_GlobalRegistryFind_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalRegistryList provides a mock function with given fields: _a0
func (_m *MockService) GlobalRegistryList(_a0 *model.ListOptions) ([]*model.Registry, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryList")
	}

	var r0 []*model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ListOptions) ([]*model.Registry, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.ListOptions) []*model.Registry); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ListOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GlobalRegistryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalRegistryList'
type MockService_GlobalRegistryList_Call struct {
	*mock.Call
}

// GlobalRegistryList is a helper method to define mock.On call
//   - _a0 *model.ListOptions
func (_e *MockService_Expecter) GlobalRegistryList(_a0 interface{}) *MockService_GlobalRegistryList_Call {
	return &MockService_GlobalRegistryList_Call{Call: _e.mock.On("GlobalRegistryList", _a0)}
}

func (_c *MockService_GlobalRegistryList_Call) Run(run func(_a0 *model.ListOptions)) *MockService_GlobalRegistryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.ListOptions))
	})
	return _c
}

func (_c *MockService_GlobalRegistryList_Call) Return(_a0 []*model.Registry, _a1 error) *MockService_GlobalRegistryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GlobalRegistryList_Call) RunAndReturn(run func(*model.ListOptions) ([]*model.Registry, error)) *MockService_GlobalRegistryList_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalRegistryUpdate provides a mock function with given fields: _a0
func (_m *MockService) GlobalRegistryUpdate(_a0 *model.Registry) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalRegistryUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Registry) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_GlobalRegistryUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalRegistryUpdate'
type MockService_GlobalRegistryUpdate_Call struct {
	*mock.Call
}

// GlobalRegistryUpdate is a helper method to define mock.On call
//   - _a0 *model.Registry
func (_e *MockService_Expecter) GlobalRegistryUpdate(_a0 interface{}) *MockService_GlobalRegistryUpdate_Call {
	return &MockService_GlobalRegistryUpdate_Call{Call: _e.mock.On("GlobalRegistryUpdate", _a0)}
}

func (_c *MockService_GlobalRegistryUpdate_Call) Run(run func(_a0 *model.Registry)) *MockService_GlobalRegistryUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Registry))
	})
	return _c
}

func (_c *MockService_GlobalRegistryUpdate_Call) Return(_a0 error) *MockService_GlobalRegistryUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GlobalRegistryUpdate_Call) RunAndReturn(run func(*model.Registry) error) *MockService_GlobalRegistryUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// OrgRegistryCreate provides a mock function with given fields: _a0, _a1
func (_m *MockService) OrgRegistryCreate(_a0 int64, _a1 *model.Registry) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgRegistryCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *model.Registry) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_OrgRegistryCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgRegistryCreate'
type MockService_OrgRegistryCreate_Call struct {
	*mock.Call
}

// OrgRegistryCreate is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 *model.Registry
func (_e *MockService_Expecter) OrgRegistryCreate(_a0 interface{}, _a1 interface{}) *MockService_OrgRegistryCreate_Call {
	return &MockService_OrgRegistryCreate_Call{Call: _e.mock.On("OrgRegistryCreate", _a0, _a1)}
}

func (_c *MockService_OrgRegistryCreate_Call) Run(run func(_a0 int64, _a1 *model.Registry)) *MockService_OrgRegistryCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*model.Registry))
	})
	return _c
}

func (_c *MockService_OrgRegistryCreate_Call) Return(_a0 error) *MockService_OrgRegistryCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_OrgRegistryCreate_Call) RunAndReturn(run func(int64, *model.Registry) error) *MockService_OrgRegistryCreate_Call {
	_c.Call.Return(run)
	return _c
}

// OrgRegistryDelete provides a mock function with given fields: _a0, _a1
func (_m *MockService) OrgRegistryDelete(_a0 int64, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgRegistryDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_OrgRegistryDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgRegistryDelete'
type MockService_OrgRegistryDelete_Call struct {
	*mock.Call
}

// OrgRegistryDelete is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 string
func (_e *MockService_Expecter) OrgRegistryDelete(_a0 interface{}, _a1 interface{}) *MockService_OrgRegistryDelete_Call {
	return &MockService_OrgRegistryDelete_Call{Call: _e.mock.On("OrgRegistryDelete", _a0, _a1)}
}

func (_c *MockService_OrgRegistryDelete_Call) Run(run func(_a0 int64, _a1 string)) *MockService_OrgRegistryDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockService_OrgRegistryDelete_Call) Return(_a0 error) *MockService_OrgRegistryDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_OrgRegistryDelete_Call) RunAndReturn(run func(int64, string) error) *MockService_OrgRegistryDelete_Call {
	_c.Call.Return(run)
	return _c
}

// OrgRegistryFind provides a mock function with given fields: _a0, _a1
func (_m *MockService) OrgRegistryFind(_a0 int64, _a1 string) (*model.Registry, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgRegistryFind")
	}

	var r0 *model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (*model.Registry, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, string) *model.Registry); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_OrgRegistryFind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgRegistryFind'
type MockService_OrgRegistryFind_Call struct {
	*mock.Call
}

// OrgRegistryFind is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 string
func (_e *MockService_Expecter) OrgRegistryFind(_a0 interface{}, _a1 interface{}) *MockService_OrgRegistryFind_Call {
	return &MockService_OrgRegistryFind_Call{Call: _e.mock.On("OrgRegistryFind", _a0, _a1)}
}

func (_c *MockService_OrgRegistryFind_Call) Run(run func(_a0 int64, _a1 string)) *MockService_OrgRegistryFind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockService_OrgRegistryFind_Call) Return(_a0 *model.Registry, _a1 error) *MockService_OrgRegistryFind_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_OrgRegistryFind_Call) RunAndReturn(run func(int64, string) (*model.Registry, error)) *MockService_OrgRegistryFind_Call {
	_c.Call.Return(run)
	return _c
}

// OrgRegistryList provides a mock function with given fields: _a0, _a1
func (_m *MockService) OrgRegistryList(_a0 int64, _a1 *model.ListOptions) ([]*model.Registry, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgRegistryList")
	}

	var r0 []*model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *model.ListOptions) ([]*model.Registry, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, *model.ListOptions) []*model.Registry); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *model.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_OrgRegistryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgRegistryList'
type MockService_OrgRegistryList_Call struct {
	*mock.Call
}

// OrgRegistryList is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 *model.ListOptions
func (_e *MockService_Expecter) OrgRegistryList(_a0 interface{}, _a1 interface{}) *MockService_OrgRegistryList_Call {
	return &MockService_OrgRegistryList_Call{Call: _e.mock.On("OrgRegistryList", _a0, _a1)}
}

func (_c *MockService_OrgRegistryList_Call) Run(run func(_a0 int64, _a1 *model.ListOptions)) *MockService_OrgRegistryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*model.ListOptions))
	})
	return _c
}

func (_c *MockService_OrgRegistryList_Call) Return(_a0 []*model.Registry, _a1 error) *MockService_OrgRegistryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_OrgRegistryList_Call) RunAndReturn(run func(int64, *model.ListOptions) ([]*model.Registry, error)) *MockService_OrgRegistryList_Call {
	_c.Call.Return(run)
	return _c
}

// OrgRegistryUpdate provides a mock function with given fields: _a0, _a1
func (_m *MockService) OrgRegistryUpdate(_a0 int64, _a1 *model.Registry) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgRegistryUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *model.Registry) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_OrgRegistryUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgRegistryUpdate'
type MockService_OrgRegistryUpdate_Call struct {
	*mock.Call
}

// OrgRegistryUpdate is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 *model.Registry
func (_e *MockService_Expecter) OrgRegistryUpdate(_a0 interface{}, _a1 interface{}) *MockService_OrgRegistryUpdate_Call {
	return &MockService_OrgRegistryUpdate_Call{Call: _e.mock.On("OrgRegistryUpdate", _a0, _a1)}
}

func (_c *MockService_OrgRegistryUpdate_Call) Run(run func(_a0 int64, _a1 *model.Registry)) *MockService_OrgRegistryUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*model.Registry))
	})
	return _c
}

func (_c *MockService_OrgRegistryUpdate_Call) Return(_a0 error) *MockService_OrgRegistryUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_OrgRegistryUpdate_Call) RunAndReturn(run func(int64, *model.Registry) error) *MockService_OrgRegistryUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryCreate provides a mock function with given fields: _a0, _a1
func (_m *MockService) RegistryCreate(_a0 *model.Repo, _a1 *model.Registry) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegistryCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Registry) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RegistryCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryCreate'
type MockService_RegistryCreate_Call struct {
	*mock.Call
}

// RegistryCreate is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 *model.Registry
func (_e *MockService_Expecter) RegistryCreate(_a0 interface{}, _a1 interface{}) *MockService_RegistryCreate_Call {
	return &MockService_RegistryCreate_Call{Call: _e.mock.On("RegistryCreate", _a0, _a1)}
}

func (_c *MockService_RegistryCreate_Call) Run(run func(_a0 *model.Repo, _a1 *model.Registry)) *MockService_RegistryCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(*model.Registry))
	})
	return _c
}

func (_c *MockService_RegistryCreate_Call) Return(_a0 error) *MockService_RegistryCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RegistryCreate_Call) RunAndReturn(run func(*model.Repo, *model.Registry) error) *MockService_RegistryCreate_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryDelete provides a mock function with given fields: _a0, _a1
func (_m *MockService) RegistryDelete(_a0 *model.Repo, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegistryDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Repo, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RegistryDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryDelete'
type MockService_RegistryDelete_Call struct {
	*mock.Call
}

// RegistryDelete is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 string
func (_e *MockService_Expecter) RegistryDelete(_a0 interface{}, _a1 interface{}) *MockService_RegistryDelete_Call {
	return &MockService_RegistryDelete_Call{Call: _e.mock.On("RegistryDelete", _a0, _a1)}
}

func (_c *MockService_RegistryDelete_Call) Run(run func(_a0 *model.Repo, _a1 string)) *MockService_RegistryDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(string))
	})
	return _c
}

func (_c *MockService_RegistryDelete_Call) Return(_a0 error) *MockService_RegistryDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RegistryDelete_Call) RunAndReturn(run func(*model.Repo, string) error) *MockService_RegistryDelete_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryFind provides a mock function with given fields: _a0, _a1
func (_m *MockService) RegistryFind(_a0 *model.Repo, _a1 string) (*model.Registry, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegistryFind")
	}

	var r0 *model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Repo, string) (*model.Registry, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Repo, string) *model.Registry); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Repo, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_RegistryFind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryFind'
type MockService_RegistryFind_Call struct {
	*mock.Call
}

// RegistryFind is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 string
func (_e *MockService_Expecter) RegistryFind(_a0 interface{}, _a1 interface{}) *MockService_RegistryFind_Call {
	return &MockService_RegistryFind_Call{Call: _e.mock.On("RegistryFind", _a0, _a1)}
}

func (_c *MockService_RegistryFind_Call) Run(run func(_a0 *model.Repo, _a1 string)) *MockService_RegistryFind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(string))
	})
	return _c
}

func (_c *MockService_RegistryFind_Call) Return(_a0 *model.Registry, _a1 error) *MockService_RegistryFind_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_RegistryFind_Call) RunAndReturn(run func(*model.Repo, string) (*model.Registry, error)) *MockService_RegistryFind_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryList provides a mock function with given fields: _a0, _a1
func (_m *MockService) RegistryList(_a0 *model.Repo, _a1 *model.ListOptions) ([]*model.Registry, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegistryList")
	}

	var r0 []*model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.ListOptions) ([]*model.Registry, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.ListOptions) []*model.Registry); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Repo, *model.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_RegistryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryList'
type MockService_RegistryList_Call struct {
	*mock.Call
}

// RegistryList is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 *model.ListOptions
func (_e *MockService_Expecter) RegistryList(_a0 interface{}, _a1 interface{}) *MockService_RegistryList_Call {
	return &MockService_RegistryList_Call{Call: _e.mock.On("RegistryList", _a0, _a1)}
}

func (_c *MockService_RegistryList_Call) Run(run func(_a0 *model.Repo, _a1 *model.ListOptions)) *MockService_RegistryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(*model.ListOptions))
	})
	return _c
}

func (_c *MockService_RegistryList_Call) Return(_a0 []*model.Registry, _a1 error) *MockService_RegistryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_RegistryList_Call) RunAndReturn(run func(*model.Repo, *model.ListOptions) ([]*model.Registry, error)) *MockService_RegistryList_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryListPipeline provides a mock function with given fields: _a0, _a1
func (_m *MockService) RegistryListPipeline(_a0 *model.Repo, _a1 *model.Pipeline) ([]*model.Registry, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegistryListPipeline")
	}

	var r0 []*model.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Pipeline) ([]*model.Registry, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Pipeline) []*model.Registry); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Repo, *model.Pipeline) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_RegistryListPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryListPipeline'
type MockService_RegistryListPipeline_Call struct {
	*mock.Call
}

// RegistryListPipeline is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 *model.Pipeline
func (_e *MockService_Expecter) RegistryListPipeline(_a0 interface{}, _a1 interface{}) *MockService_RegistryListPipeline_Call {
	return &MockService_RegistryListPipeline_Call{Call: _e.mock.On("RegistryListPipeline", _a0, _a1)}
}

func (_c *MockService_RegistryListPipeline_Call) Run(run func(_a0 *model.Repo, _a1 *model.Pipeline)) *MockService_RegistryListPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(*model.Pipeline))
	})
	return _c
}

func (_c *MockService_RegistryListPipeline_Call) Return(_a0 []*model.Registry, _a1 error) *MockService_RegistryListPipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_RegistryListPipeline_Call) RunAndReturn(run func(*model.Repo, *model.Pipeline) ([]*model.Registry, error)) *MockService_RegistryListPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryUpdate provides a mock function with given fields: _a0, _a1
func (_m *MockService) RegistryUpdate(_a0 *model.Repo, _a1 *model.Registry) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegistryUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Registry) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RegistryUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryUpdate'
type MockService_RegistryUpdate_Call struct {
	*mock.Call
}

// RegistryUpdate is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 *model.Registry
func (_e *MockService_Expecter) RegistryUpdate(_a0 interface{}, _a1 interface{}) *MockService_RegistryUpdate_Call {
	return &MockService_RegistryUpdate_Call{Call: _e.mock.On("RegistryUpdate", _a0, _a1)}
}

func (_c *MockService_RegistryUpdate_Call) Run(run func(_a0 *model.Repo, _a1 *model.Registry)) *MockService_RegistryUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(*model.Registry))
	})
	return _c
}

func (_c *MockService_RegistryUpdate_Call) Return(_a0 error) *MockService_RegistryUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RegistryUpdate_Call) RunAndReturn(run func(*model.Repo, *model.Registry) error) *MockService_RegistryUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
