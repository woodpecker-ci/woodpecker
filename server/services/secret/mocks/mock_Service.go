// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "go.woodpecker-ci.org/woodpecker/v3/server/model"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GlobalSecretCreate provides a mock function with given fields: _a0
func (_m *MockService) GlobalSecretCreate(_a0 *model.Secret) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSecretCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Secret) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_GlobalSecretCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalSecretCreate'
type MockService_GlobalSecretCreate_Call struct {
	*mock.Call
}

// GlobalSecretCreate is a helper method to define mock.On call
//   - _a0 *model.Secret
func (_e *MockService_Expecter) GlobalSecretCreate(_a0 interface{}) *MockService_GlobalSecretCreate_Call {
	return &MockService_GlobalSecretCreate_Call{Call: _e.mock.On("GlobalSecretCreate", _a0)}
}

func (_c *MockService_GlobalSecretCreate_Call) Run(run func(_a0 *model.Secret)) *MockService_GlobalSecretCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Secret))
	})
	return _c
}

func (_c *MockService_GlobalSecretCreate_Call) Return(_a0 error) *MockService_GlobalSecretCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GlobalSecretCreate_Call) RunAndReturn(run func(*model.Secret) error) *MockService_GlobalSecretCreate_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalSecretDelete provides a mock function with given fields: _a0
func (_m *MockService) GlobalSecretDelete(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSecretDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_GlobalSecretDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalSecretDelete'
type MockService_GlobalSecretDelete_Call struct {
	*mock.Call
}

// GlobalSecretDelete is a helper method to define mock.On call
//   - _a0 string
func (_e *MockService_Expecter) GlobalSecretDelete(_a0 interface{}) *MockService_GlobalSecretDelete_Call {
	return &MockService_GlobalSecretDelete_Call{Call: _e.mock.On("GlobalSecretDelete", _a0)}
}

func (_c *MockService_GlobalSecretDelete_Call) Run(run func(_a0 string)) *MockService_GlobalSecretDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_GlobalSecretDelete_Call) Return(_a0 error) *MockService_GlobalSecretDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GlobalSecretDelete_Call) RunAndReturn(run func(string) error) *MockService_GlobalSecretDelete_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalSecretFind provides a mock function with given fields: _a0
func (_m *MockService) GlobalSecretFind(_a0 string) (*model.Secret, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSecretFind")
	}

	var r0 *model.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Secret, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Secret); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GlobalSecretFind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalSecretFind'
type MockService_GlobalSecretFind_Call struct {
	*mock.Call
}

// GlobalSecretFind is a helper method to define mock.On call
//   - _a0 string
func (_e *MockService_Expecter) GlobalSecretFind(_a0 interface{}) *MockService_GlobalSecretFind_Call {
	return &MockService_GlobalSecretFind_Call{Call: _e.mock.On("GlobalSecretFind", _a0)}
}

func (_c *MockService_GlobalSecretFind_Call) Run(run func(_a0 string)) *MockService_GlobalSecretFind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_GlobalSecretFind_Call) Return(_a0 *model.Secret, _a1 error) *MockService_GlobalSecretFind_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GlobalSecretFind_Call) RunAndReturn(run func(string) (*model.Secret, error)) *MockService_GlobalSecretFind_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalSecretList provides a mock function with given fields: _a0
func (_m *MockService) GlobalSecretList(_a0 *model.ListOptions) ([]*model.Secret, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSecretList")
	}

	var r0 []*model.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ListOptions) ([]*model.Secret, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.ListOptions) []*model.Secret); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ListOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GlobalSecretList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalSecretList'
type MockService_GlobalSecretList_Call struct {
	*mock.Call
}

// GlobalSecretList is a helper method to define mock.On call
//   - _a0 *model.ListOptions
func (_e *MockService_Expecter) GlobalSecretList(_a0 interface{}) *MockService_GlobalSecretList_Call {
	return &MockService_GlobalSecretList_Call{Call: _e.mock.On("GlobalSecretList", _a0)}
}

func (_c *MockService_GlobalSecretList_Call) Run(run func(_a0 *model.ListOptions)) *MockService_GlobalSecretList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.ListOptions))
	})
	return _c
}

func (_c *MockService_GlobalSecretList_Call) Return(_a0 []*model.Secret, _a1 error) *MockService_GlobalSecretList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GlobalSecretList_Call) RunAndReturn(run func(*model.ListOptions) ([]*model.Secret, error)) *MockService_GlobalSecretList_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalSecretUpdate provides a mock function with given fields: _a0
func (_m *MockService) GlobalSecretUpdate(_a0 *model.Secret) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GlobalSecretUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Secret) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_GlobalSecretUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalSecretUpdate'
type MockService_GlobalSecretUpdate_Call struct {
	*mock.Call
}

// GlobalSecretUpdate is a helper method to define mock.On call
//   - _a0 *model.Secret
func (_e *MockService_Expecter) GlobalSecretUpdate(_a0 interface{}) *MockService_GlobalSecretUpdate_Call {
	return &MockService_GlobalSecretUpdate_Call{Call: _e.mock.On("GlobalSecretUpdate", _a0)}
}

func (_c *MockService_GlobalSecretUpdate_Call) Run(run func(_a0 *model.Secret)) *MockService_GlobalSecretUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Secret))
	})
	return _c
}

func (_c *MockService_GlobalSecretUpdate_Call) Return(_a0 error) *MockService_GlobalSecretUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_GlobalSecretUpdate_Call) RunAndReturn(run func(*model.Secret) error) *MockService_GlobalSecretUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// OrgSecretCreate provides a mock function with given fields: _a0, _a1
func (_m *MockService) OrgSecretCreate(_a0 int64, _a1 *model.Secret) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *model.Secret) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_OrgSecretCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgSecretCreate'
type MockService_OrgSecretCreate_Call struct {
	*mock.Call
}

// OrgSecretCreate is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 *model.Secret
func (_e *MockService_Expecter) OrgSecretCreate(_a0 interface{}, _a1 interface{}) *MockService_OrgSecretCreate_Call {
	return &MockService_OrgSecretCreate_Call{Call: _e.mock.On("OrgSecretCreate", _a0, _a1)}
}

func (_c *MockService_OrgSecretCreate_Call) Run(run func(_a0 int64, _a1 *model.Secret)) *MockService_OrgSecretCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*model.Secret))
	})
	return _c
}

func (_c *MockService_OrgSecretCreate_Call) Return(_a0 error) *MockService_OrgSecretCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_OrgSecretCreate_Call) RunAndReturn(run func(int64, *model.Secret) error) *MockService_OrgSecretCreate_Call {
	_c.Call.Return(run)
	return _c
}

// OrgSecretDelete provides a mock function with given fields: _a0, _a1
func (_m *MockService) OrgSecretDelete(_a0 int64, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_OrgSecretDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgSecretDelete'
type MockService_OrgSecretDelete_Call struct {
	*mock.Call
}

// OrgSecretDelete is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 string
func (_e *MockService_Expecter) OrgSecretDelete(_a0 interface{}, _a1 interface{}) *MockService_OrgSecretDelete_Call {
	return &MockService_OrgSecretDelete_Call{Call: _e.mock.On("OrgSecretDelete", _a0, _a1)}
}

func (_c *MockService_OrgSecretDelete_Call) Run(run func(_a0 int64, _a1 string)) *MockService_OrgSecretDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockService_OrgSecretDelete_Call) Return(_a0 error) *MockService_OrgSecretDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_OrgSecretDelete_Call) RunAndReturn(run func(int64, string) error) *MockService_OrgSecretDelete_Call {
	_c.Call.Return(run)
	return _c
}

// OrgSecretFind provides a mock function with given fields: _a0, _a1
func (_m *MockService) OrgSecretFind(_a0 int64, _a1 string) (*model.Secret, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretFind")
	}

	var r0 *model.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (*model.Secret, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, string) *model.Secret); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_OrgSecretFind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgSecretFind'
type MockService_OrgSecretFind_Call struct {
	*mock.Call
}

// OrgSecretFind is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 string
func (_e *MockService_Expecter) OrgSecretFind(_a0 interface{}, _a1 interface{}) *MockService_OrgSecretFind_Call {
	return &MockService_OrgSecretFind_Call{Call: _e.mock.On("OrgSecretFind", _a0, _a1)}
}

func (_c *MockService_OrgSecretFind_Call) Run(run func(_a0 int64, _a1 string)) *MockService_OrgSecretFind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockService_OrgSecretFind_Call) Return(_a0 *model.Secret, _a1 error) *MockService_OrgSecretFind_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_OrgSecretFind_Call) RunAndReturn(run func(int64, string) (*model.Secret, error)) *MockService_OrgSecretFind_Call {
	_c.Call.Return(run)
	return _c
}

// OrgSecretList provides a mock function with given fields: _a0, _a1
func (_m *MockService) OrgSecretList(_a0 int64, _a1 *model.ListOptions) ([]*model.Secret, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretList")
	}

	var r0 []*model.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *model.ListOptions) ([]*model.Secret, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int64, *model.ListOptions) []*model.Secret); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *model.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_OrgSecretList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgSecretList'
type MockService_OrgSecretList_Call struct {
	*mock.Call
}

// OrgSecretList is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 *model.ListOptions
func (_e *MockService_Expecter) OrgSecretList(_a0 interface{}, _a1 interface{}) *MockService_OrgSecretList_Call {
	return &MockService_OrgSecretList_Call{Call: _e.mock.On("OrgSecretList", _a0, _a1)}
}

func (_c *MockService_OrgSecretList_Call) Run(run func(_a0 int64, _a1 *model.ListOptions)) *MockService_OrgSecretList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*model.ListOptions))
	})
	return _c
}

func (_c *MockService_OrgSecretList_Call) Return(_a0 []*model.Secret, _a1 error) *MockService_OrgSecretList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_OrgSecretList_Call) RunAndReturn(run func(int64, *model.ListOptions) ([]*model.Secret, error)) *MockService_OrgSecretList_Call {
	_c.Call.Return(run)
	return _c
}

// OrgSecretUpdate provides a mock function with given fields: _a0, _a1
func (_m *MockService) OrgSecretUpdate(_a0 int64, _a1 *model.Secret) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OrgSecretUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *model.Secret) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_OrgSecretUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgSecretUpdate'
type MockService_OrgSecretUpdate_Call struct {
	*mock.Call
}

// OrgSecretUpdate is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 *model.Secret
func (_e *MockService_Expecter) OrgSecretUpdate(_a0 interface{}, _a1 interface{}) *MockService_OrgSecretUpdate_Call {
	return &MockService_OrgSecretUpdate_Call{Call: _e.mock.On("OrgSecretUpdate", _a0, _a1)}
}

func (_c *MockService_OrgSecretUpdate_Call) Run(run func(_a0 int64, _a1 *model.Secret)) *MockService_OrgSecretUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*model.Secret))
	})
	return _c
}

func (_c *MockService_OrgSecretUpdate_Call) Return(_a0 error) *MockService_OrgSecretUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_OrgSecretUpdate_Call) RunAndReturn(run func(int64, *model.Secret) error) *MockService_OrgSecretUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// SecretCreate provides a mock function with given fields: _a0, _a1
func (_m *MockService) SecretCreate(_a0 *model.Repo, _a1 *model.Secret) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SecretCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Secret) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SecretCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretCreate'
type MockService_SecretCreate_Call struct {
	*mock.Call
}

// SecretCreate is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 *model.Secret
func (_e *MockService_Expecter) SecretCreate(_a0 interface{}, _a1 interface{}) *MockService_SecretCreate_Call {
	return &MockService_SecretCreate_Call{Call: _e.mock.On("SecretCreate", _a0, _a1)}
}

func (_c *MockService_SecretCreate_Call) Run(run func(_a0 *model.Repo, _a1 *model.Secret)) *MockService_SecretCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(*model.Secret))
	})
	return _c
}

func (_c *MockService_SecretCreate_Call) Return(_a0 error) *MockService_SecretCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SecretCreate_Call) RunAndReturn(run func(*model.Repo, *model.Secret) error) *MockService_SecretCreate_Call {
	_c.Call.Return(run)
	return _c
}

// SecretDelete provides a mock function with given fields: _a0, _a1
func (_m *MockService) SecretDelete(_a0 *model.Repo, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SecretDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Repo, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SecretDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretDelete'
type MockService_SecretDelete_Call struct {
	*mock.Call
}

// SecretDelete is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 string
func (_e *MockService_Expecter) SecretDelete(_a0 interface{}, _a1 interface{}) *MockService_SecretDelete_Call {
	return &MockService_SecretDelete_Call{Call: _e.mock.On("SecretDelete", _a0, _a1)}
}

func (_c *MockService_SecretDelete_Call) Run(run func(_a0 *model.Repo, _a1 string)) *MockService_SecretDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(string))
	})
	return _c
}

func (_c *MockService_SecretDelete_Call) Return(_a0 error) *MockService_SecretDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SecretDelete_Call) RunAndReturn(run func(*model.Repo, string) error) *MockService_SecretDelete_Call {
	_c.Call.Return(run)
	return _c
}

// SecretFind provides a mock function with given fields: _a0, _a1
func (_m *MockService) SecretFind(_a0 *model.Repo, _a1 string) (*model.Secret, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SecretFind")
	}

	var r0 *model.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Repo, string) (*model.Secret, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Repo, string) *model.Secret); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Repo, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_SecretFind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretFind'
type MockService_SecretFind_Call struct {
	*mock.Call
}

// SecretFind is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 string
func (_e *MockService_Expecter) SecretFind(_a0 interface{}, _a1 interface{}) *MockService_SecretFind_Call {
	return &MockService_SecretFind_Call{Call: _e.mock.On("SecretFind", _a0, _a1)}
}

func (_c *MockService_SecretFind_Call) Run(run func(_a0 *model.Repo, _a1 string)) *MockService_SecretFind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(string))
	})
	return _c
}

func (_c *MockService_SecretFind_Call) Return(_a0 *model.Secret, _a1 error) *MockService_SecretFind_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_SecretFind_Call) RunAndReturn(run func(*model.Repo, string) (*model.Secret, error)) *MockService_SecretFind_Call {
	_c.Call.Return(run)
	return _c
}

// SecretList provides a mock function with given fields: _a0, _a1
func (_m *MockService) SecretList(_a0 *model.Repo, _a1 *model.ListOptions) ([]*model.Secret, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SecretList")
	}

	var r0 []*model.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.ListOptions) ([]*model.Secret, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.ListOptions) []*model.Secret); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Repo, *model.ListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_SecretList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretList'
type MockService_SecretList_Call struct {
	*mock.Call
}

// SecretList is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 *model.ListOptions
func (_e *MockService_Expecter) SecretList(_a0 interface{}, _a1 interface{}) *MockService_SecretList_Call {
	return &MockService_SecretList_Call{Call: _e.mock.On("SecretList", _a0, _a1)}
}

func (_c *MockService_SecretList_Call) Run(run func(_a0 *model.Repo, _a1 *model.ListOptions)) *MockService_SecretList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(*model.ListOptions))
	})
	return _c
}

func (_c *MockService_SecretList_Call) Return(_a0 []*model.Secret, _a1 error) *MockService_SecretList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_SecretList_Call) RunAndReturn(run func(*model.Repo, *model.ListOptions) ([]*model.Secret, error)) *MockService_SecretList_Call {
	_c.Call.Return(run)
	return _c
}

// SecretListPipeline provides a mock function with given fields: _a0, _a1
func (_m *MockService) SecretListPipeline(_a0 *model.Repo, _a1 *model.Pipeline) ([]*model.Secret, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SecretListPipeline")
	}

	var r0 []*model.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Pipeline) ([]*model.Secret, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Pipeline) []*model.Secret); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Repo, *model.Pipeline) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_SecretListPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretListPipeline'
type MockService_SecretListPipeline_Call struct {
	*mock.Call
}

// SecretListPipeline is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 *model.Pipeline
func (_e *MockService_Expecter) SecretListPipeline(_a0 interface{}, _a1 interface{}) *MockService_SecretListPipeline_Call {
	return &MockService_SecretListPipeline_Call{Call: _e.mock.On("SecretListPipeline", _a0, _a1)}
}

func (_c *MockService_SecretListPipeline_Call) Run(run func(_a0 *model.Repo, _a1 *model.Pipeline)) *MockService_SecretListPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(*model.Pipeline))
	})
	return _c
}

func (_c *MockService_SecretListPipeline_Call) Return(_a0 []*model.Secret, _a1 error) *MockService_SecretListPipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_SecretListPipeline_Call) RunAndReturn(run func(*model.Repo, *model.Pipeline) ([]*model.Secret, error)) *MockService_SecretListPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// SecretUpdate provides a mock function with given fields: _a0, _a1
func (_m *MockService) SecretUpdate(_a0 *model.Repo, _a1 *model.Secret) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SecretUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Repo, *model.Secret) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SecretUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretUpdate'
type MockService_SecretUpdate_Call struct {
	*mock.Call
}

// SecretUpdate is a helper method to define mock.On call
//   - _a0 *model.Repo
//   - _a1 *model.Secret
func (_e *MockService_Expecter) SecretUpdate(_a0 interface{}, _a1 interface{}) *MockService_SecretUpdate_Call {
	return &MockService_SecretUpdate_Call{Call: _e.mock.On("SecretUpdate", _a0, _a1)}
}

func (_c *MockService_SecretUpdate_Call) Run(run func(_a0 *model.Repo, _a1 *model.Secret)) *MockService_SecretUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Repo), args[1].(*model.Secret))
	})
	return _c
}

func (_c *MockService_SecretUpdate_Call) Return(_a0 error) *MockService_SecretUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SecretUpdate_Call) RunAndReturn(run func(*model.Repo, *model.Secret) error) *MockService_SecretUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
