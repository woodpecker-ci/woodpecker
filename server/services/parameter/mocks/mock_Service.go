// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"go.woodpecker-ci.org/woodpecker/v3/server/model"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// ParameterCreate provides a mock function for the type MockService
func (_mock *MockService) ParameterCreate(repo *model.Repo, parameter *model.Parameter) error {
	ret := _mock.Called(repo, parameter)

	if len(ret) == 0 {
		panic("no return value specified for ParameterCreate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Repo, *model.Parameter) error); ok {
		r0 = returnFunc(repo, parameter)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_ParameterCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParameterCreate'
type MockService_ParameterCreate_Call struct {
	*mock.Call
}

// ParameterCreate is a helper method to define mock.On call
//   - repo *model.Repo
//   - parameter *model.Parameter
func (_e *MockService_Expecter) ParameterCreate(repo interface{}, parameter interface{}) *MockService_ParameterCreate_Call {
	return &MockService_ParameterCreate_Call{Call: _e.mock.On("ParameterCreate", repo, parameter)}
}

func (_c *MockService_ParameterCreate_Call) Run(run func(repo *model.Repo, parameter *model.Parameter)) *MockService_ParameterCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.Repo
		if args[0] != nil {
			arg0 = args[0].(*model.Repo)
		}
		var arg1 *model.Parameter
		if args[1] != nil {
			arg1 = args[1].(*model.Parameter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_ParameterCreate_Call) Return(err error) *MockService_ParameterCreate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_ParameterCreate_Call) RunAndReturn(run func(repo *model.Repo, parameter *model.Parameter) error) *MockService_ParameterCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ParameterDelete provides a mock function for the type MockService
func (_mock *MockService) ParameterDelete(repo *model.Repo, s string) error {
	ret := _mock.Called(repo, s)

	if len(ret) == 0 {
		panic("no return value specified for ParameterDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Repo, string) error); ok {
		r0 = returnFunc(repo, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_ParameterDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParameterDelete'
type MockService_ParameterDelete_Call struct {
	*mock.Call
}

// ParameterDelete is a helper method to define mock.On call
//   - repo *model.Repo
//   - s string
func (_e *MockService_Expecter) ParameterDelete(repo interface{}, s interface{}) *MockService_ParameterDelete_Call {
	return &MockService_ParameterDelete_Call{Call: _e.mock.On("ParameterDelete", repo, s)}
}

func (_c *MockService_ParameterDelete_Call) Run(run func(repo *model.Repo, s string)) *MockService_ParameterDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.Repo
		if args[0] != nil {
			arg0 = args[0].(*model.Repo)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_ParameterDelete_Call) Return(err error) *MockService_ParameterDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_ParameterDelete_Call) RunAndReturn(run func(repo *model.Repo, s string) error) *MockService_ParameterDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ParameterDeleteByID provides a mock function for the type MockService
func (_mock *MockService) ParameterDeleteByID(repo *model.Repo, n int64) error {
	ret := _mock.Called(repo, n)

	if len(ret) == 0 {
		panic("no return value specified for ParameterDeleteByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Repo, int64) error); ok {
		r0 = returnFunc(repo, n)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_ParameterDeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParameterDeleteByID'
type MockService_ParameterDeleteByID_Call struct {
	*mock.Call
}

// ParameterDeleteByID is a helper method to define mock.On call
//   - repo *model.Repo
//   - n int64
func (_e *MockService_Expecter) ParameterDeleteByID(repo interface{}, n interface{}) *MockService_ParameterDeleteByID_Call {
	return &MockService_ParameterDeleteByID_Call{Call: _e.mock.On("ParameterDeleteByID", repo, n)}
}

func (_c *MockService_ParameterDeleteByID_Call) Run(run func(repo *model.Repo, n int64)) *MockService_ParameterDeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.Repo
		if args[0] != nil {
			arg0 = args[0].(*model.Repo)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_ParameterDeleteByID_Call) Return(err error) *MockService_ParameterDeleteByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_ParameterDeleteByID_Call) RunAndReturn(run func(repo *model.Repo, n int64) error) *MockService_ParameterDeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// ParameterFind provides a mock function for the type MockService
func (_mock *MockService) ParameterFind(repo *model.Repo, s string) (*model.Parameter, error) {
	ret := _mock.Called(repo, s)

	if len(ret) == 0 {
		panic("no return value specified for ParameterFind")
	}

	var r0 *model.Parameter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*model.Repo, string) (*model.Parameter, error)); ok {
		return returnFunc(repo, s)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.Repo, string) *model.Parameter); ok {
		r0 = returnFunc(repo, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Parameter)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*model.Repo, string) error); ok {
		r1 = returnFunc(repo, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ParameterFind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParameterFind'
type MockService_ParameterFind_Call struct {
	*mock.Call
}

// ParameterFind is a helper method to define mock.On call
//   - repo *model.Repo
//   - s string
func (_e *MockService_Expecter) ParameterFind(repo interface{}, s interface{}) *MockService_ParameterFind_Call {
	return &MockService_ParameterFind_Call{Call: _e.mock.On("ParameterFind", repo, s)}
}

func (_c *MockService_ParameterFind_Call) Run(run func(repo *model.Repo, s string)) *MockService_ParameterFind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.Repo
		if args[0] != nil {
			arg0 = args[0].(*model.Repo)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_ParameterFind_Call) Return(parameter *model.Parameter, err error) *MockService_ParameterFind_Call {
	_c.Call.Return(parameter, err)
	return _c
}

func (_c *MockService_ParameterFind_Call) RunAndReturn(run func(repo *model.Repo, s string) (*model.Parameter, error)) *MockService_ParameterFind_Call {
	_c.Call.Return(run)
	return _c
}

// ParameterFindByID provides a mock function for the type MockService
func (_mock *MockService) ParameterFindByID(repo *model.Repo, n int64) (*model.Parameter, error) {
	ret := _mock.Called(repo, n)

	if len(ret) == 0 {
		panic("no return value specified for ParameterFindByID")
	}

	var r0 *model.Parameter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*model.Repo, int64) (*model.Parameter, error)); ok {
		return returnFunc(repo, n)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.Repo, int64) *model.Parameter); ok {
		r0 = returnFunc(repo, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Parameter)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*model.Repo, int64) error); ok {
		r1 = returnFunc(repo, n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ParameterFindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParameterFindByID'
type MockService_ParameterFindByID_Call struct {
	*mock.Call
}

// ParameterFindByID is a helper method to define mock.On call
//   - repo *model.Repo
//   - n int64
func (_e *MockService_Expecter) ParameterFindByID(repo interface{}, n interface{}) *MockService_ParameterFindByID_Call {
	return &MockService_ParameterFindByID_Call{Call: _e.mock.On("ParameterFindByID", repo, n)}
}

func (_c *MockService_ParameterFindByID_Call) Run(run func(repo *model.Repo, n int64)) *MockService_ParameterFindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.Repo
		if args[0] != nil {
			arg0 = args[0].(*model.Repo)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_ParameterFindByID_Call) Return(parameter *model.Parameter, err error) *MockService_ParameterFindByID_Call {
	_c.Call.Return(parameter, err)
	return _c
}

func (_c *MockService_ParameterFindByID_Call) RunAndReturn(run func(repo *model.Repo, n int64) (*model.Parameter, error)) *MockService_ParameterFindByID_Call {
	_c.Call.Return(run)
	return _c
}

// ParameterFindByNameAndBranch provides a mock function for the type MockService
func (_mock *MockService) ParameterFindByNameAndBranch(repo *model.Repo, name string, branch string) (*model.Parameter, error) {
	ret := _mock.Called(repo, name, branch)

	if len(ret) == 0 {
		panic("no return value specified for ParameterFindByNameAndBranch")
	}

	var r0 *model.Parameter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*model.Repo, string, string) (*model.Parameter, error)); ok {
		return returnFunc(repo, name, branch)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.Repo, string, string) *model.Parameter); ok {
		r0 = returnFunc(repo, name, branch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Parameter)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*model.Repo, string, string) error); ok {
		r1 = returnFunc(repo, name, branch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ParameterFindByNameAndBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParameterFindByNameAndBranch'
type MockService_ParameterFindByNameAndBranch_Call struct {
	*mock.Call
}

// ParameterFindByNameAndBranch is a helper method to define mock.On call
//   - repo *model.Repo
//   - name string
//   - branch string
func (_e *MockService_Expecter) ParameterFindByNameAndBranch(repo interface{}, name interface{}, branch interface{}) *MockService_ParameterFindByNameAndBranch_Call {
	return &MockService_ParameterFindByNameAndBranch_Call{Call: _e.mock.On("ParameterFindByNameAndBranch", repo, name, branch)}
}

func (_c *MockService_ParameterFindByNameAndBranch_Call) Run(run func(repo *model.Repo, name string, branch string)) *MockService_ParameterFindByNameAndBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.Repo
		if args[0] != nil {
			arg0 = args[0].(*model.Repo)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockService_ParameterFindByNameAndBranch_Call) Return(parameter *model.Parameter, err error) *MockService_ParameterFindByNameAndBranch_Call {
	_c.Call.Return(parameter, err)
	return _c
}

func (_c *MockService_ParameterFindByNameAndBranch_Call) RunAndReturn(run func(repo *model.Repo, name string, branch string) (*model.Parameter, error)) *MockService_ParameterFindByNameAndBranch_Call {
	_c.Call.Return(run)
	return _c
}

// ParameterList provides a mock function for the type MockService
func (_mock *MockService) ParameterList(repo *model.Repo) ([]*model.Parameter, error) {
	ret := _mock.Called(repo)

	if len(ret) == 0 {
		panic("no return value specified for ParameterList")
	}

	var r0 []*model.Parameter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*model.Repo) ([]*model.Parameter, error)); ok {
		return returnFunc(repo)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.Repo) []*model.Parameter); ok {
		r0 = returnFunc(repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Parameter)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*model.Repo) error); ok {
		r1 = returnFunc(repo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_ParameterList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParameterList'
type MockService_ParameterList_Call struct {
	*mock.Call
}

// ParameterList is a helper method to define mock.On call
//   - repo *model.Repo
func (_e *MockService_Expecter) ParameterList(repo interface{}) *MockService_ParameterList_Call {
	return &MockService_ParameterList_Call{Call: _e.mock.On("ParameterList", repo)}
}

func (_c *MockService_ParameterList_Call) Run(run func(repo *model.Repo)) *MockService_ParameterList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.Repo
		if args[0] != nil {
			arg0 = args[0].(*model.Repo)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_ParameterList_Call) Return(parameters []*model.Parameter, err error) *MockService_ParameterList_Call {
	_c.Call.Return(parameters, err)
	return _c
}

func (_c *MockService_ParameterList_Call) RunAndReturn(run func(repo *model.Repo) ([]*model.Parameter, error)) *MockService_ParameterList_Call {
	_c.Call.Return(run)
	return _c
}

// ParameterUpdate provides a mock function for the type MockService
func (_mock *MockService) ParameterUpdate(repo *model.Repo, parameter *model.Parameter) error {
	ret := _mock.Called(repo, parameter)

	if len(ret) == 0 {
		panic("no return value specified for ParameterUpdate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Repo, *model.Parameter) error); ok {
		r0 = returnFunc(repo, parameter)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_ParameterUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParameterUpdate'
type MockService_ParameterUpdate_Call struct {
	*mock.Call
}

// ParameterUpdate is a helper method to define mock.On call
//   - repo *model.Repo
//   - parameter *model.Parameter
func (_e *MockService_Expecter) ParameterUpdate(repo interface{}, parameter interface{}) *MockService_ParameterUpdate_Call {
	return &MockService_ParameterUpdate_Call{Call: _e.mock.On("ParameterUpdate", repo, parameter)}
}

func (_c *MockService_ParameterUpdate_Call) Run(run func(repo *model.Repo, parameter *model.Parameter)) *MockService_ParameterUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.Repo
		if args[0] != nil {
			arg0 = args[0].(*model.Repo)
		}
		var arg1 *model.Parameter
		if args[1] != nil {
			arg1 = args[1].(*model.Parameter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_ParameterUpdate_Call) Return(err error) *MockService_ParameterUpdate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_ParameterUpdate_Call) RunAndReturn(run func(repo *model.Repo, parameter *model.Parameter) error) *MockService_ParameterUpdate_Call {
	_c.Call.Return(run)
	return _c
}
