// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	forge "go.woodpecker-ci.org/woodpecker/v3/server/forge"

	model "go.woodpecker-ci.org/woodpecker/v3/server/model"
)

// MockSetupForge is an autogenerated mock type for the SetupForge type
type MockSetupForge struct {
	mock.Mock
}

type MockSetupForge_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSetupForge) EXPECT() *MockSetupForge_Expecter {
	return &MockSetupForge_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockSetupForge) Execute(_a0 *model.Forge) (forge.Forge, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 forge.Forge
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Forge) (forge.Forge, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Forge) forge.Forge); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(forge.Forge)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Forge) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSetupForge_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSetupForge_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *model.Forge
func (_e *MockSetupForge_Expecter) Execute(_a0 interface{}) *MockSetupForge_Execute_Call {
	return &MockSetupForge_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockSetupForge_Execute_Call) Run(run func(_a0 *model.Forge)) *MockSetupForge_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Forge))
	})
	return _c
}

func (_c *MockSetupForge_Execute_Call) Return(_a0 forge.Forge, _a1 error) *MockSetupForge_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSetupForge_Execute_Call) RunAndReturn(run func(*model.Forge) (forge.Forge, error)) *MockSetupForge_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSetupForge creates a new instance of MockSetupForge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSetupForge(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSetupForge {
	mock := &MockSetupForge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
